#! /usr/bin/perl -w

use strict;

use Barefoot::debug(1);

use Barefoot::base;
use Barefoot::DataStore;
use Barefoot::exception;
use Barefoot::DataStore::DataSet;

sub test_error(&@);


# get a data store we can use for testing
system("ln -sf /etc/data_store/t3test.dstore .");
my $t3 = DataStore->open("t3test", "buddy") or die("can't open data store");

# and get a data set we can use for testing
my $data = $t3->load_table("select * from {~timer}.category")
		or die("can't get an initial data set from load_table");

die("not blessed ref (DataSet)") unless $data->isa("DataStore::DataSet");


# test all functions
test_foreach_row();
test_add_column();
test_remove_column();
test_alter();
test_group();


# looks okay
unlink("t3test.dstore");
print "ALL TESTS PASSED\n";


sub test_error (&@)
{
	my ($try, $catch) = @_;

	# print STDERR "in test_error block\n";
	eval { &$try };
	if ($@)
	{
		# print "in try: $@";
		$@ =~ /^(.*) at (.*) line (\d+)(?:.*\.)?\n$/;
		die("incorrect 'die' format: $@") unless $3;
		local $_ = $1;
		print STDERR "actually caught $_\n" if DEBUG >= 2;
		$__FILE__ = $2;
		$__LINE__ = $3;
		return true if &$catch;
	}
	return false;
}


sub test_foreach_row
{
	my @hold;
	$data->foreach_row(sub
			{
				push @hold, substr($_->{name}, 0, 5);
			}
	) or die("foreach_row call failed");

	my $i = 0;
	foreach (@$data)
	{
		die("foreach_row didn't work")
				unless $hold[$i++] eq substr($_->{name}, 0, 5);
	}
}


sub test_add_column
{
	$data->add_column( new_col => sub
			{
				substr($_->{name}, 0, 5);
			}
	) or die("add_column call failed");

	foreach (@$data)
	{
		die("add_column didn't work")
				unless $_->{new_col} eq substr($_->{name}, 0, 5);
	}

=comment
	# now try to add multiple columns
	$data->add_column( col1 => sub {return 1}, col2 => sub {return 2},
			col3 => sub {return 3} )
			or die("add_column (multiple) call failed");
	$data->foreach_row
	{
		die("add_column (multiple) didn't work")
				unless $_->{col1} == 1 and $_->{col2} == 2 and $_->{col3} == 3;
	};
=cut
}


sub test_remove_column
{
	test_error { $data->remove_column(); }
	catch { /must specify column to remove/ }
	or die("remove_column didn't demand column name");

	$data->remove_column('new_col') or die("remove_column call failed");

	foreach (@$data)
	{
		die("remove_column didn't work")
				if exists $_->{new_col};
	}

=comment
	# now test with multiple columns
	$data->remove_column( qw<col1 col2 col3> )
			or die("remove_column (multiple) call failed");
=cut
}


sub test_alter
{
	# save some info for later comparison
	my (@names, @categories);
	foreach (@$data)
	{
		push @names, $_->{name};
		push @categories, $_->{category};
	}

	# first, the call
	$data->alter_dataset({
			add_columns		=>	[ qw<name_len category1 name1> ],
			remove_columns	=>	[ qw<name category> ],
			foreach_row		=>	sub
			{
				$_->{name1} = $_->{name};
				$_->{category1} = $_->{category};

				$_->{name_len} = length($_->{name});
			}
	}) or die("alter_dataset call failed");

	my $i = 0;
	foreach (@$data)
	{
		die("alter_dataset didn't work")
				unless
					$_->{name1} eq $names[$i]
					and $_->{category1} eq $categories[$i]
					and $_->{name_len} == length($names[$i])
					and not exists $_->{name}
					and not exists $_->{category};
		++$i;
	}

	# test rename column
	$data->rename_column(name1 => 'name') or die("rename_column call failed");
	die("rename_column didn't work")
			unless exists $data->[0]->{name}
				and not exists $data->[0]->{name1};

	# test bad rename
	test_error { $data->rename_column(bogus => 'whatever'); }
	catch { /unknown column name/ }
	or die("rename_column didn't catch bogus column name");

	# finish putting things back the way they were
	$data->rename_column(category1 => 'category');
	$data->remove_column('name_len');
}


sub test_group
{
	# make sure the mechanics are working
	my $newdata = $data->group(
			group_by	=>	[ qw<category name> ],
			new_columns	=>	[ qw<category name> ],
			calculate	=>	sub
							{
								my ($src, $dst) = @_;
								die("not seeing SRC correctly")
										unless join(',', sort keys %$src)
											eq "category,name";
								die("group by columns not transferring")
										unless join(',', sort keys %$dst)
											eq "category,name";
							},
	);
	die("group call failed") unless $newdata;
	die("group call didn't return a dataset")
			unless $newdata->isa("DataStore::DataSet");
	foreach my $orig_row (sort { $a->{category} cmp $b->{category} } @$data)
	{
		my $grouped_row = shift @$newdata;
		die("row not a DataRow in group")
				unless $grouped_row->isa('DataStore::DataRow');
		my $didnt_work = sub
		{
			die("do-nothing group didn't work: " . $_[0])
		};

		foreach (keys %$orig_row)
		{
			$didnt_work->("chk grp row ($_)")
					unless exists $grouped_row->{$_}
					and $orig_row->{$_} eq $grouped_row->{$_};
		}
		foreach (keys %$grouped_row)
		{
			$didnt_work->("chk orig row ($_)")
					unless exists $orig_row->{$_}
					and $orig_row->{$_} eq $grouped_row->{$_};
		}
		foreach (0..$#$orig_row)
		{
			$didnt_work->("chk idxs ($_)")
					unless $orig_row->[$_] eq $grouped_row->[$_];
		}
	}

	# try a simple grouping
	$data->add_column( num_words => sub
			{
				my @words;
				my $num_words = scalar(@words = split(' ', $_->{name}));
				print "setting $_->{name} to $_->{num_words} words\n"
						if DEBUG >= 3;
				return $num_words;
			}
	);
	my $group = $data->group(
			group_by	=>	[ qw<num_words> ],
			new_columns	=>	[ qw<num_words symbols> ],
			calculate	=>	sub
							{
								my ($src, $dst) = @_;
								print STDERR "adding symbol $src->{category} "
										. "to num words $dst->{num_words}\n"
										if DEBUG >= 3;
								if (defined $dst->{symbols})
								{
									$dst->{symbols} .= "," . $src->{category};
								}
								else
								{
									$dst->{symbols} = $src->{category};
								}
							},
	);
	die("group call failed") unless $group;
	$group->dump_set(*STDERR) if DEBUG >= 4;

	# go at this from a different angle and hope we get the same results
	my (%words, @words);
	$words{$_->{category}} = scalar(@words = split(' ', $_->{name}))
			foreach @$data;
	foreach (@$group)
	{
		foreach my $sym (split(',', $_->{symbols}))
		{
			print STDERR "testing $sym with $words{$sym} words against "
					. "$_->{num_words} in the group struct\n" if DEBUG >= 3;
			die("group function didn't work")
					unless $words{$sym} == $_->{num_words};
		}
	}

	# make sure constant columns fail if not constant
	$group = $data->group(
			group_by	=>	[ qw<num_words> ],
			constant	=>	[ qw<category> ],
	);
	die("constant columns don't fail appropriately") if $group;

	# try an example with more columns to group by
	$data = $t3->load_table("
			select tl.emp_id, tl.client_id, tl.proj_id, tl.phase_id,
					tl.hours, c.name as client_name, p.name as proj_name
			from {~timer}.time_log tl, {~timer}.client c, {~timer}.project p
			where tl.client_id = c.client_id
			and tl.client_id = p.client_id
			and tl.proj_id = p.proj_id
			and tl.log_date between p.start_date and p.end_date
			and tl.log_date between '1/1/1999' and '6/30/1999'
	") or die("can't load for extended test");
	my $ds_group = $data->group(
			group_by	=>	[ qw<emp_id client_id proj_id phase_id> ],
			new_columns	=>	[ qw<emp_id client_id proj_id phase_id>,
								qw<client_name proj_name total_hours> ],
			constant	=>	[ qw<client_name proj_name> ],
			on_new_group=>	sub
							{
								$_->{total_hours} = 0;
							},
			calculate	=>	sub
							{
								my ($src, $dst) = @_;
								$dst->{total_hours} += $src->{hours};
							},
	);
	die("group call failed") unless $ds_group;
	$ds_group->dump_set(*STDERR) if DEBUG >= 4;

	# now get SQL to return the same info
	my $sql_group = $t3->load_table("
			select tl.emp_id, tl.client_id, tl.proj_id, tl.phase_id,
					c.name as client_name, p.name as proj_name,
					sum(tl.hours) as total_hours
			from {~timer}.time_log tl, {~timer}.client c, {~timer}.project p
			where tl.client_id = c.client_id
			and tl.client_id = p.client_id
			and tl.proj_id = p.proj_id
			and tl.log_date between p.start_date and p.end_date
			and tl.log_date between '1/1/1999' and '6/30/1999'
			group by tl.emp_id, tl.client_id, tl.proj_id, tl.phase_id,
					c.name, p.name
			order by tl.emp_id, tl.client_id, tl.proj_id, tl.phase_id
	") or die("couldn't get SQL data for extended group test");

	# now compare the two
	# note: this relies on the fact that group() returns its data sorted
	die("don't have the same number of rows") unless @$ds_group == @$sql_group;
	for my $x (0..$#$ds_group)
	{
		my $didnt_work = sub
		{
			print STDERR "row $x col $_ ds has $ds_group->[$x]->{$_}, "
					. "sql has $sql_group->[$x]->{$_}\n" if DEBUG >= 3;
			die("group data not equal");
		};

		foreach ($ds_group->[$x]->colnames())
		{
			if ($_ eq 'total_hours')
			{
				&$didnt_work unless $ds_group->[$x]->{$_}
						== $sql_group->[$x]->{$_};
			}
			else
			{
				if (defined $ds_group->[$x]->{$_}
						and defined $sql_group->[$x]->{$_})
				{
					&$didnt_work unless $ds_group->[$x]->{$_}
							eq $sql_group->[$x]->{$_};
				}
				else
				{
					&$didnt_work unless defined $ds_group->[$x]->{$_}
							== defined $sql_group->[$x]->{$_}
				}
			}
		}
		foreach ($sql_group->[$x]->colnames())
		{
			if ($_ eq 'total_hours')
			{
				&$didnt_work unless $ds_group->[$x]->{$_}
						== $sql_group->[$x]->{$_};
			}
			else
			{
				if (defined $ds_group->[$x]->{$_}
						and defined $sql_group->[$x]->{$_})
				{
					&$didnt_work unless $ds_group->[$x]->{$_}
							eq $sql_group->[$x]->{$_};
				}
				else
				{
					&$didnt_work unless defined $ds_group->[$x]->{$_}
							== defined $sql_group->[$x]->{$_}
				}
			}
		}
	}
}
