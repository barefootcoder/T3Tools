#! /usr/bin/perl

use strict;
use warnings;

use Date::Parse;
use Date::Format;

use Barefoot(DEBUG => 1);
use Barefoot::date;
use Barefoot::TestFirst;


# test valid date formats
die("failed valid test") unless date::isValid("12/31/01");
die("failed valid test") unless date::isValid("12/31/2001");
die("failed valid test") unless date::isValid("31/Dec/01");
die("failed valid test") unless date::isValid("31/Dec/2001");
die("failed valid test") unless date::isValid("12-31-01");
die("failed valid test") unless date::isValid("12-31-2001");
die("failed valid test") unless date::isValid("31-Dec-01");
die("failed valid test") unless date::isValid("31-Dec-2001");
die("failed valid test") unless date::isValid("Dec 31 2001 12:00AM");
# raw time values shouldn't really be considered valid dates
die("raw time considered valid") if date::isValid(time());

# test invalid ones
die("failed invalid test") if date::isValid("bmoogle");
die("failed invalid test") if date::isValid("1/42/01");

# make sure mdy() isn't using GMT any more
die("mdy failed GMT check") unless date::mdy(str2time("1/1/2001 10:00pm")) eq date::mdy(str2time("1/1/2001 10:00am"));

# make sure mdy() can take an arg
die("mdy for not now fails") unless date::mdy(str2time("11/5/66")) eq curfmt('1966-11-05');
die("mdy for date string fails") unless date::mdy("11/5/66") eq curfmt('1966-11-05');
# similar tests for mdyt()
die("mdyt for not now fails") unless date::mdyt(str2time("11/5/66 21:03:45")) eq curfmt('1966-11-05 21:03:45', 1);
die("mdyt for date string fails") unless date::mdyt("11/5/66 21:03:45") eq curfmt('1966-11-05 21:03:45', 1);


# test today function
my $date_cmd = date_cmd();
debuggit(2 => "today test: date returned", $date_cmd, "/ date::today is", date::today());
die("today's date is wrong") unless date::today() eq $date_cmd;

# and test now
die("now's time is wrong") unless date::now() eq date_cmd(1);


# test incDays a bit
debuggit(2 => "date::today is", date::today(), "and inc'd by 0 is", date::incDays(date::today(), 0));
die("increment zero test failed") unless date::incDays(date::today(), 0) eq date::today();
my $four_days_ago = str2time(date::today()) - 4 * 24 * 60 * 60;
my $inc_to_now = date::incDays($four_days_ago, 4);
unless ($inc_to_now eq date::today())
{
	debuggit(3 => "four days ago is", $four_days_ago);
	debuggit(2 => "incDays returned", $inc_to_now);
	debuggit(2 => "today is", date::today());
	die("increment with raw times failed");
}
unless (date::incDays('2006-10-29', 1) eq curfmt('2006-10-30'))
{
	debuggit(2 => "10/29/06 + 1 day is", date::incDays('2006/10/29', 1));
	die("DST test failed");
}


# test dayDiff a bit
die("day diff test failed") unless date::dayDiff(date::incDays(date::today(), -4), date::today()) == 4;
die("day diff test failed") unless date::dayDiff(date::incDays(date::today(), -4)) == 4;
my $raw_diff = date::dayDiff( str2time(date::incDays(date::today(), -4)), str2time(date::today()) );
print "raw diff is $raw_diff\n" if DEBUG >= 2;
die("day diff with raw times failed") unless $raw_diff == 4;
# weird DST stuff throws this one off, so test it
die("DST bug still extant") unless date::dayDiff('12/29/03', '8/8/05') == 588;


# other tests
test_period_funcs();


# now test with a different date format
{
	local $date::Options{'date_fmt'} = "%Y%m%d";
	local $date::Options{'time_fmt'} = "%Y%m%d%H%M%S";

	die("can't handle alternative date format") unless date::today() eq time2str("%Y%m%d", time());
	die("can't handle alternative time format") unless date::now() eq time2str("%Y%m%d%H%M%S", time());
}
# and should be back to default here
die("doesn't return to default") unless date::today() eq curfmt(scalar(localtime));

# test options override
# (need separate program for this test)
verify_err { Barefoot::date->request_change_to_def_option(bmoogle => "BOOGA BOOGA!") }
		'unknown option', 'call to request_change_to_def_option with bad attr';
die("option override fails") unless run_proglet EXITCODE => <<END;
	use Barefoot::date(time_fmt => '%Y%m%d%H%M%S');

	Barefoot::date->request_change_to_def_option(date_fmt => '%Y-%m-%d');
	Barefoot::date->request_change_to_def_option(time_fmt => '%Y-%m-%d');
	die("can't override date option") unless date::mdy('12/31/97') eq '1997-12-31';
	die("override succeeded when it shouldn't") unless date::mdyt('12/31/97 1:06pm') eq '19971231130600';
END


# everything looks good
print "ALL TESTS PASSED\n";


sub curfmt
{
	return time2str($_[1] ? $date::Options{'time_fmt'} : $date::Options{'date_fmt'}, str2time($_[0]));
}


BEGIN
{
	# this is a rough conversion of Date::Format specs to the specs used by the date command
	# it probably isn't perfect, but it should be close enough
	my %DF2date =
	(
		c	=>	'%D %T',
		C	=>	'%c',
		e	=>	'%-d',
		L	=>	'%-m',
	);
	# all these are the same in both, so just translate literally
	$DF2date{$_} = "%$_" foreach qw< % a A b B d D h H I j k l m M n p P r R s S t T U w W x X y Y z Z >;
	# the following cannot be translated (leaving them out here causes a fatal err): %G %o %q

	sub date_cmd
	{
		my $date_fmt = $_[0] ? $date::Options{'time_fmt'} : $date::Options{'date_fmt'};
		$date_fmt =~ s/%(.)/exists $DF2date{$1} ? $DF2date{$1} : die("no date cmd equiv for %$1")/eg;
		my $out = `date +"$date_fmt"`;
		chomp $out;
		return $out;
	}
}


sub test_period_funcs
{
	die("period_num gave wrong answer") unless date::period_num('1/1/01', 7) == 1095;
	die("period_num gave wrong answer") unless date::period_num('1/1/01', 7, '1/31/1994') == 361;
	die("period_num gave wrong answer") unless date::period_num('1/1/01', 14, '1/31/1994') == 180;

	# let's be tricky ... can we specify a default epoch?
	my $output = `
			perl -e '
				use Barefoot(DEBUG => 1);
				use Barefoot::date epoch => "1/31/1994";

				print date::period_num("1/1/01", 7);
			'
	`;
	debuggit(2 => "output was", $output);
	die("setting default option for epoch failed") unless $output == 361;

	die("period_name gave wrong answer")
			unless date::period_name(date::period_num('1/5/5', 7, '1/31/1994'), 7, '1/31/1994')
					eq join(' - ', curfmt('1/3/5'), curfmt('1/9/5'));
}
