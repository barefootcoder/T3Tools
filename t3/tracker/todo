#! /usr/bin/perl

###########################################################################
#
# todo
#
###########################################################################
#
# First working Tracker module.
#
# #########################################################################
#
# All the code herein is released under the Artistic License
#		( http://www.perl.com/language/misc/Artistic.html )
# Copyright (c) 2002-2003 Barefoot Software, Copyright (c) 2004-2006 ThinkGeek
#
###########################################################################

use strict;
use warnings;

use Getopt::Std;
use Tie::IxHash;
use Date::Parse;
use Data::Dumper;
use Time::ParseDate;

use Barefoot;
use Barefoot::date;
use Barefoot::array;
use Barefoot::range;
use Barefoot::format;
use Barefoot::exception;
use Barefoot::input qw< input get_yn menu_select $COLS $ROWS >;

use Barefoot::T3::base;
use Barefoot::T3::Todo;
use Barefoot::T3::db_get qw< one_datum >;
use Barefoot::T3::valid qw< get_parameter >;
use Barefoot::T3::CLI qw< cli_common_opts cli_get_command cli_fatal >;


#################################
# CONSTANTS
#################################

use constant PRESS_RETURN => "Press return to continue . . .";


#################################
# FORMATS
#################################

our $TodoListHeader =
"   Todo:            Title:                               CLI PRJ  Due by:\n" .
"   ===============  ===================================  === ===  ========";

our $TodoList =
'   @<<<<<<<<<<<<<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  @<< @<<  @m/#d/@y';

# $TodoList was designed for an 80-column screen; adjust the Title field to take up more or less space based
# on the screen width
_screen_width_adjust($TodoListHeader, 'Title: ');						# note that that trailing space is crucial ...
_screen_width_adjust($TodoListHeader, '=' x 35);
_screen_width_adjust($TodoList, '@' . '<' x 34);

our $TodoTask =
	'
    Client:      @<<      @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      Due Date:
    Project:     @<<      @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      @m/#d/@yyy
    Tracking: @<<<<<<<<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                              Completed Date:
    Queue:       @<<      @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      @m/#d/@yyy

    Synopsis:     ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<&
    ~~            ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    Description:
    ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
~~  ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<';


#################################
# PSEUDO-GLOBAL VARIABLES
#################################

our $todos = {};

our %menu_list;
tie %menu_list, 'Tie::IxHash',
(
	"Add a task"			=>		{ func	=>	\&add_todo,			base => 1,	master => 1,	},
	"Show task details"		=>		{ func	=>	\&todo_details,		base => 1,	master => 1,	},
	"Edit a task"			=>		{ func	=>	\&edit_todo,		base => 1,	master => 1,	},
	"Postpone a task"		=>		{ func	=>	\&push_date,		base => 1,	master => 0,	},
	"Cancel a task"			=>		{ func	=>	\&cancel_todo,		base => 1,	master => 1,	},
	"Done with a task"		=>		{ func	=>	\&complete_todo,	base => 1,	master => 0,	},
	"Refresh task list"		=>		{ func	=>	\&refresh_list,		base => 1,	master => 1,	},
	"Mass postpone tasks"	=>		{ func	=>	\&shift_schedule,	base => 1,	master => 0,	},
	"Quit program"			=>		{ func	=>	sub { exit },		base => 1,	master => 1,	},
);

# the menu will get printed in three columns on an 80-column screen
# sometime in the future, we should try to do this a bit more dynamically,
# but for now this is good enough
my $menu_size = range::round(scalar(keys %menu_list) / 3, range::ROUND_UP);
# now figure maximum number of tasks we can put in our list:
# save 2 rows for list header, 1 for separator between list and menu,
# the number of menu lines, and 2 for the prompt after the menu
our $max_task_list = $ROWS - 2 - 1 - $menu_size - 2;


#################################
# OPTIONS AND ENVIRONMENT VARS
#################################

our $parminfo = {};
my $commands = {};
tie %$commands, 'Tie::IxHash',
(
	l	=>	"LIST",
);
our $command;

my $mode = 'base';
if (-t STDOUT or @ARGV)
{
	my $opt = {};
	getopts('mlfu:h', $opt) or usage();
	cli_common_opts($parminfo, $opt);
	$command = cli_get_command($commands, $opt);

	if ($opt->{'m'})
	{
		$mode = 'master';
		cli_fatal(2, "can't specify -u in master mode (-h for usage)") if exists $opt->{'u'};
		$parminfo->{'user'} = 'MASTER';
	}
	usage() if defined $opt->{'h'};
}
else
{
}


#################################
# main()
#################################

our $mod = T3::Module::Todo->new( user => $parminfo->{'user'} );
$todos = $mod->readfile({
	TAGS		=>	{
						CANCELLED	=>	sub
										{
											my ($todos, $line) = @_;
											$todos->{':CANCELLED'} = { map { $_ => 1 } split("\t", $line) };
										},
					},
	FOREACH		=>	sub
					{
						my ($todos, $task) = @_;

						# account for the possibility that due dates are stored as
						# date strings instead of time numbers (as they should be)
						$task->{'due'} = str2time($task->{'due'}) if $task->{'due'} =~ m@/@;

						# queues and completed dates should be NULL (i.e. undef) if blank
						foreach ( qw< queue completed > )
						{
							$task->{$_} = undef if $task->{$_} eq "";
						}
					},
});

if ($command)
{
	if ($command eq 'LIST')
	{
		print "\n", menu_header(), "\n";
	}

	exit 0;
}
# else no command, so go interactive
$parminfo->{'force'} = 0;

# infinite loop for menu and actions
while (true)
{
	my @menu_choices = grep { $menu_list{$_}->{$mode} } keys %menu_list;
	my $mheader = menu_header();
	my $command = menu_select("Choose:", @menu_choices,
			{
				LMARGIN => 2,
				SPBETWEEN => 3,
				HEADER => $mheader,
				TMARGIN => 1,
				TRUNC_MSG => "<<MORE TASKS THAN SHOWN>>\n",
			});
	$menu_list{ $menu_choices[$command] }->{'func'}->();
}


#################################
# HELPER ROUTINES
#################################

sub _screen_width_adjust
{
	my ($format, $field_to_adj) = @_;

	my $cur_width = length($field_to_adj);
	my $desired_width = $COLS - (80 - $cur_width);
	return if $desired_width == $cur_width;

	my $new_field = $desired_width < $cur_width ? substr($field_to_adj, 0, $desired_width)
			: $field_to_adj . substr($field_to_adj, -1) x ($desired_width - $cur_width);
	$_[0] =~ s/\Q$field_to_adj\E/$new_field/;
}


#################################
# MENU COMMAND SUBROUTINES
#################################


sub add_todo
{
	my $new_todo = {};

	$new_todo->{'name'} = input("Short codename for the item:");
	if (exists $todos->{$new_todo->{'name'}})
	{
		print "There is already a task with that code; sorry.\n";
		input(PRESS_RETURN);
		return undef;
	}
	input_todo($new_todo);

	$todos->{$new_todo->{'name'}} = $new_todo;
	try
	{
		$mod->save_to_db($parminfo->{'user'}, $todos);
	}
	catch
	{
		print STDERR "Warning: could not save task to the DB ($_)\n";
		print STDERR "Your task will be saved to the DB later when the error is corrected\n";
	};
	$mod->writefile($todos);
}


sub todo_details
{
	my $index = get_existing_todo("show details for");
	return unless defined $index;
	input(PRESS_RETURN);
}


sub edit_todo
{
	my $todo = get_existing_todo("edit");
	return unless defined $todo;

	input_todo($todo);

	$mod->writefile($todos);
}


sub push_date
{
	my $todo = get_existing_todo("postpone");
	return unless defined $todo;

	$todo->{'due'} = input_date($todo->{'due'});

	$mod->writefile($todos);
}


sub cancel_todo
{
	my $todo = get_existing_todo("cancel");
	return unless defined $todo;

	print "A cancelled todo task is gone forever!!\n";
	if (get_yn("Are you sure you want to do this?"))
	{
		my $old_todo = delete $todos->{$todo->{'name'}};
		$mod->save_history("cancel", $old_todo);
		$mod->writefile($todos);
	}
}


sub complete_todo
{
	my $todo = get_existing_todo("complete");
	return unless defined $todo;

	if (get_yn("Are you definitely ready to mark this task completed?"))
	{
		$todo->{'completed'} = time();
		$mod->writefile($todos);
	}
}


sub refresh_list
{
	# clear the list, then reread the file: that refreshes the list
	$todos = {};
	readfile();
}


sub shift_schedule
{
	# determine oldest task
	my $oldest_todo = (sort( { $a->{'due'} <=> $b->{'due'} } $mod->values($todos)))[0];
	my $old_date = $oldest_todo->{'due'};
	writeln('Oldest task is dated @m/#d/@y.', $old_date);

	print "Please enter a new date for this task.\n";
	my $new_date = input_date();

	my $shift_days = int(date::dayDiff($old_date, $new_date));
	print "All tasks will be moved forward $shift_days days.\n";
	if (get_yn("Are you sure?"))
	{
		foreach my $todo ($mod->values($todos))
		{
			$todo->{'due'} = str2time(date::incDays($todo->{'due'}, $shift_days));
		}

		$mod->writefile($todos);
	}
}


#################################
# SUBROUTINES
#################################

sub usage
{
	error(0, "usage is:\n",
			"    todo [ -h | -lf { -m | -u user } ]\n",
			"       -h: this help message\n",
			"       -m: work with master todo list (default: work with personal list)\n",
			"       -l: list todos and exit (default: enter interactive mode)\n",
			"       -f: force (don't ask for confirmations in interactive mode)\n",
			"       -u: work with todos for a different user\n",
	);
}


sub error
{
	my ($exitcode, @messages) = @_;
	my $progname = $0;
	$progname =~ s@.*/@@;
=comment
	if ($cgi)
	{
		foreach (@messages)
		{
			# s/\n/<BR>\n/g;
		}
		print @messages, "\n";
		exit 0;
	}
	else
=cut
	{
		print STDERR "$progname: ", @messages, "\n";
		exit $exitcode;
	}
}


sub todo_menu_list
{
	my @menu_list = sort { $a->{'due'} <=> $b->{'due'} } grep { not $_->{'completed'} } $mod->values($todos);
	foreach my $todo (@menu_list)
	{
		$todo = swrite($TodoList, $mod->fields($todo)) . "\n";
	}
	return @menu_list;
}


sub menu_header
{
	if (%$todos)
	{
		my $list_header = $TodoListHeader . "\n";
		return join('', $list_header, todo_menu_list());
	}
	else
	{
		return "\n\tYou have no items in your todo list.\n\n";
	}
}


sub get_existing_todo
{
	my ($operation) = @_;

	my $name = input("What is the name of the task you want to $operation?");

	unless (exists $todos->{$name})
	{
		print "No such task!\n";
		input(PRESS_RETURN);
		return undef;
	}

	my $todo = $todos->{$name};

	# retrieve full names from database
	foreach (
			[ 'client',		'{@client}',			'client_id',		false ],
			[ 'project',	'{@project}',			'proj_id',			true ],
			[ 'tracking',	'{@client_tracking}',	'tracking_code',	true ],
#			[ 'queue',		'{@queue}',				'queue_id',			false ],
			)
	{
		my ($which, $table, $id_col, $use_client) = @$_;

		# it's okay if the element is missing; just blank out and move on
		if (not $todo->{$which})
		{
			$todo->{$which} = $todo->{"${which}_name"} = "";
			next;
		}

		my $query = qq{
			select name from $table
			where $id_col = '$todo->{$which}'
		};
		$query .= " and client_id = '$todo->{client}'" if $use_client;

		$todo->{"${which}_name"} = one_datum($query);
	}

	# make a copy for the format, else the field itself will get eaten
	my $title = $todo->{'title'};
	writeln($TodoTask, @$todo{ qw< client client_name project project_name due tracking tracking_name
			queue queue_name completed > }, $title);
	print "\n\n";

	return $todo;
}


sub input_todo
{
	my ($todo) = @_;
	$parminfo->{'user'} ||= $mod->user;

	$todo->{'title'} = input("Brief description (title) of the task:", $todo->{'title'});
	$todo->{'due'} = input_date($todo->{'due'});

	my $opts = { SAVE_IN_OBJECT => 1 };									# need to save results in object, not parminfo
	get_parameter("client", $parminfo, $todo, $opts);
	get_parameter("project", $parminfo, $todo, $opts);
#	$opts->{ALLOW_NULL} = 1;											# queues can be NULL
#	get_parameter("queue", $parminfo, $todo, $opts);

	# even if task existed before, it might have changed, so mark it unposted
	$todo->{'posted'} = 0;
}


sub input_date
{
	my ($old_date) = @_;

	my $new_date = input(
			"When task is due:",
			$old_date ? swrite('@m/#d/@y', $old_date) : date::today(), 
			{
				CONVERT		=>	\&parse_date_spec,
				VALID_ERR	=>	"\a\a  >>Invalid Date!\n"
			}
	);

	return $new_date;
}


sub parse_date_spec
{
	# this style needs a little help (but just a little)
	if ($_[0] =~ /^\+(\d+)$/)
	{
		# interpret as number of days from today
		$_[0] .= " days";
	}

	# let parsedate do all the hard work
	return parsedate($_[0], PREFER_FUTURE => 1);
}
