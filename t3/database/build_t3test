#! /usr/bin/perl -w

# For RCS:
# $Date: 2002/06/12 20:50:41 $
#
# $Id: build_t3test,v 1.3 2002/06/12 20:50:41 buddy Exp $
# $Revision: 1.3 $


# create tables for TIMER
#
# this builds up the tables in the T3 database from existing data in the
# timer database, as well as some hard-coded data

use strict;

use Getopt::Std;

use Barefoot::exception;
use Barefoot::DataStore;


my $user = "root";
my $destds = "t3test";
my $srcdb = "t3";


my $opt = {};
getopts("U:s:d:h", $opt);
if (defined $opt->{h})
{
    print STDERR "usage: $0 [-U user] [-s datastore] [-d source_database]\n";
    print STDERR "   defaults are -U $user -s $destds -d $srcdb\n";
    exit;
}
$user = $opt->{U} if defined $opt->{U};
$destds = $opt->{s} if defined $opt->{s};
$srcdb = $opt->{d} if defined $opt->{d};


# open up the data store
my $t3;
try
{
    $t3 = DataStore->open($destds, $user);
}
catch
{
    print STDERR "\nThe T3 test data store could not be opened for the following "
            . "reason:\n";
    print STDERR "  ==>  $_\n";
    print STDERR "Please run the make_data_store script for $destds.  You may\n";
    print STDERR "have to run this script as root.\n\n";
};


# create the tables
system("make_t3_tables -s$destds");
system("make_timer_tables -s$destds");


# now fill them up

set_identityins("t3", "person", "on");
build_table("person", <<END);

	insert {~t3}.person
		(person_id, first_name, last_name, company_name)
	select * from $srcdb.{~t3}.person
	;

END
set_identityins("t3", "person", "off");

set_identityins("t3", "workgroup_user", "on");
build_table("workgroup_user", <<END);

	insert {~t3}.workgroup_user
		(wuser_id, person_id, nickname, start_date, end_date)
	select * from $srcdb.{~t3}.workgroup_user
	;

END
set_identityins("t3", "workgroup_user", "off");

build_table_unchanged("timer", "category");

build_table_unchanged("timer", "internal_project");

build_table_unchanged("timer", "phase");

build_table_unchanged("timer", "client");

build_table_unchanged("timer", "client_tracking");

build_table_unchanged("timer", "project");

build_table_unchanged("timer", "employee");

build_table_unchanged("timer", "client_employee");

build_table_unchanged("timer", "project_type");

build_table_unchanged("timer", "commission_type");

build_table_unchanged("timer", "admin_commission_type");

build_table_unchanged("timer", "pay_rate");

build_table_unchanged("timer", "bill_rate");

build_table_unchanged("timer", "billing_ratio");

build_table_unchanged("timer", "resource_rate");

build_table_unchanged("timer", "resource_employee");

build_table_unchanged("timer", "salesman");

build_table_unchanged("timer", "admin_commission");

build_table_unchanged("timer", "sales_commission");

build_table_unchanged("timer", "referral_commission");

set_identityins("timer", "invoice", "on");
build_table("invoice", <<END);

	insert {~timer}.invoice
		(invoice_id, client_id, invoice_number, invoice_amount,
				invoice_billdate, invoice_paydate,
				create_user, create_date, chguser, chgdate)
	select * from $srcdb.{~timer}.invoice
	;

END
set_identityins("timer", "invoice", "off");

set_identityins("timer", "payroll", "on");
build_table("payroll", <<END);

	insert {~timer}.payroll
		(payroll_id, period_start, period_end, payroll_amount,
				overhead_amount, check_date,
				create_user, create_date, chguser, chgdate)
	select * from $srcdb.{~timer}.payroll
	;

END
set_identityins("timer", "payroll", "off");

set_identityins("timer", "commission_payment", "on");
build_table("commission_payment", <<END);

	insert {~timer}.commission_payment
		(payment_id, pay_type, pay_to, payment_amount,
				check_number, check_date, comments,
				create_user, create_date, chguser, chgdate)
	select * from $srcdb.{~timer}.commission_payment
	;

END
set_identityins("timer", "commission_payment", "off");

db_do_or_die("alter table {~timer}.time_log "
		. "alter log_source set default 'time_log'");
set_identityins("timer", "time_log", "on");
build_table("time_log", <<END);

	insert {~timer}.time_log
		(log_source, log_id, emp_id, client_id, proj_id, phase_id,
				tracking_code, log_date, hours, comments,
				invoice_id, payroll_id,
				create_user, create_date, chguser, chgdate)
	select * from $srcdb.{~timer}.time_log l
	;

END
set_identityins("timer", "time_log", "off");

db_do_or_die("alter table {~timer}.materials_log "
		. "alter log_source set default 'materials_log'");
set_identityins("timer", "materials_log", "on");
build_table("materials_log", <<END);

	insert {~timer}.materials_log
		(log_source, log_id, client_id, proj_id, log_date,
				amount_billed, amount_paid, comments, invoice_id,
				create_user, create_date, chguser, chgdate)
	select * from $srcdb.{~timer}.materials_log op
	;

END
set_identityins("timer", "materials_log", "off");

db_do_or_die("alter table {~timer}.class_log "
		. "alter log_source set default 'class_log'");
set_identityins("timer", "class_log", "on");
build_table("class_log", <<END);

	insert {~timer}.class_log
		(log_source, log_id, client_id, proj_id, num_students, num_breaks,
				log_date, start_time, end_time, comments, invoice_id,
				create_user, create_date, chguser, chgdate)
	select * from $srcdb.{~timer}.class_log
	;

END
set_identityins("timer", "class_log", "off");

build_table_unchanged("timer", "commission_modifier");

set_identityins("timer", "commission", "on");
build_table("commission", <<END);

	insert {~timer}.commission
		(commission_id, comm_type, pay_type, pay_to, period_start, period_end,
				amount, payment_id, create_user, create_date, chguser, chgdate)
	select * from $srcdb.{~timer}.commission
	;

END
set_identityins("timer", "commission", "off");

build_table_unchanged("timer", "log_commission");

build_table_unchanged("timer", "salary_bank");

build_table_unchanged("timer", "salary_draw");

build_table_unchanged("timer", "insurance_rate");

build_table_unchanged("timer", "insurance_contribution");



######################
# SUBS               #
######################


sub db_do_or_die
{
	my ($query, $die_msg) = @_;

	$t3->do($query)
			or die("$die_msg:", $t3->last_error());
}

sub build_table
{
	my ($table, $query) = @_;

	print "building $table\n";
	my $result = $t3->execute($query, report => "(%R rows affected)\n");
	die("couldn't build table $table: ", $t3->last_error()) unless $result;
	print $result;
}

sub build_table_unchanged
{
	my ($schema, $table) = @_;

	my $query = "
			insert {~$schema}.$table
			select * from $srcdb.{~$schema}.$table
			;
	";
	build_table($table, $query);
}

sub set_identityins
{
	my ($schema, $table, $state) = @_;

	# don't think this is necessary for mysql at all at all ...
	# db_do_or_die("set identity_insert {~$schema}.$table $state",
	#		"set identity insert failed for $table");
}
