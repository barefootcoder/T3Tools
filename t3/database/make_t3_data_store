#! /usr/bin/perl

# create data store and database for T3 scripts
#
# both database and data store will only be created if they don't exist, or
# if you insist (neither is dependent on the other's existence)
# note that the sa data store must exist for this to work

# to create the data store, you probably need Unix root permissions
# to create the database, you probably need the Sybase sa password
#		(in your ~/.dbpasswd file)

use strict;
use warnings;

use Getopt::Std;
use FileHandle;

use Barefoot;
use Barefoot::exception;
use Barefoot::DataStore;
use Barefoot::input qw<get_yn>;


my $server = "cid";
my $user = "root";
my $destdb = "t3test";
my $dstore = "t3test";

my $data_device = "data1";
my $idx_device = "idx1";
my $log_device = "log1";

my $opt = {};
getopts("S:U:D:s:h", $opt);
if (defined $opt->{h})
{
	print STDERR "usage: $0 [-S server] [-U username] [-D dest_db] [-s data_store]\n";
	print STDERR "   defaults are -S $server -U $user -D $destdb -s $dstore\n";
	exit;
}
$server = $opt->{S} if defined $opt->{S};
$user = $opt->{U} if defined $opt->{U};
$destdb = $opt->{D} if defined $opt->{D};
$dstore = $opt->{s} if defined $opt->{s};

die("you must not run this as root") if `id -u` == 0;
print STDERR "NOTE!! you must have sudo permission to run this script\n";

my $db_created = 0;
my $ds_created = 0;


STDOUT->autoflush();
my $sa = DataStore->open("${server}_sa", $user);


# check for pre-existence of the database
my $dbexists_query = "show databases like '$destdb'";
my $db_exists = $sa->do($dbexists_query);
if ($db_exists->next_row())
{
	print STDERR "$0: database $destdb already exists\n";
	goto DATA_STORE unless get_yn("Do you want to drop and recreate it?");
	goto DATA_STORE unless get_yn("WARNING!  Database $destdb may contain "
			. "data, and dropping it is permanent.\n"
			. "Are you sure you want to continue?");
	# boy is this dangerous!  thus the double confirmation required above
	$sa->do("drop database $destdb")
			or die("can't drop database: " . $sa->last_error());
	print "database dropped\n";
}

print "creating database now\n";
my $create_res = $sa->do(qq{
	create database $destdb
});
die("create database of $destdb failed") unless $create_res;

# double check existence via data store
$db_exists = $sa->do($dbexists_query);
die("cannot verify database creation:", $sa->last_error()) unless $db_exists->next_row();
$db_created = 1;


DATA_STORE:

# now check for pre-existence of the data store
my $caught = false;
try
{
	my $t3 = DataStore->open($dstore, $user);
}
catch
{
	$caught = true;
};

unless ($caught)
{
	print STDERR "$0: data store $dstore already exists\n";
	exit 1 unless get_yn("Do you want to recreate it?");
}

my $t3 = DataStore->create($dstore,
		rdbms				=>	'mysql',
		connect_string		=>	"dbi:mysql:host=$server;database=$destdb",
		server				=>	$server,
		user				=>	$user,
		date_handling		=>	'string',
);

$t3->configure_type(unique_id => 'int');
$t3->configure_type(type_id => 'char(1)');
$t3->configure_type(internal_id => 'char(3)');
$t3->configure_type(external_id => 'char(10)');
$t3->configure_type(description => 'varchar(30)');
$t3->configure_type(username => 'varchar(20)');
$t3->configure_type(table_name => 'varchar(30)');
$t3->configure_type(short_name => 'varchar(30)');
$t3->configure_type(comments_text => 'varchar(255)');
$t3->configure_type(percentage => 'decimal(5,2)');

$t3->configure_schema_translation('"$_[0]_"');

my $dsfile = "/etc/data_store/$dstore.dstore";
system("/usr/bin/sudo /bin/touch $dsfile");
system("/usr/bin/sudo /bin/chmod 666 $dsfile");
$t3->commit_configs();

print "data store $dstore created\n";
$ds_created = 1;


if ($db_created)
{
	# make all tables
	exit 1 unless get_yn("Recreate all tables?");

	my $ddict = "/etc/data_store/$dstore.ddict";
	system("/usr/bin/sudo /bin/touch $ddict");
	system("/usr/bin/sudo /bin/chgrp dev $ddict");
	system("/usr/bin/sudo /bin/chmod 664 $ddict");
	system("./make_t3_tables");
	system("./make_timer_tables");
	system("./make_tracker_tables");
	system("./make_reporting_tables");
}

if ($ds_created)
{
	# create all aliases
	exit 1 unless get_yn("Recreate all aliases?");

	system("./build_t3_aliases");
}

system("/usr/bin/sudo /bin/chmod 644 $dsfile");


######################
# SUBS               #
######################

