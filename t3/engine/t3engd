#! /usr/bin/perl -Tw

use strict;

use FileHandle;
use Barefoot::exception;

# system paths
use constant MKNOD => '/bin/mknod';

use constant REQUEST_FILE => 't3.request';
use constant OUTPUT_FILE => 't3.output.';

my %module =
(
	test	=>	\&test_module,
);


# main ()

log_error("starting server");

if ( ! -p REQUEST_FILE )
{
	unlink(REQUEST_FILE) if -e REQUEST_FILE;
	log_error($!) if system(MKNOD, REQUEST_FILE, "p");
}

while (1)
{
	# the open will block until it receives a request, but if we don't
	# get a request within 10 seconds, we better give it up and start again
	if (timeout { open(PIPE, REQUEST_FILE)
			or die("can't open the request pipe for reading") } 10)
	{
		my $request = <PIPE>;
		close(PIPE);
		if (defined $request)
		{
			chomp($request);
			# print STDERR "request is $request\n";
			if ($request eq "SHUTDOWN")
			{
				# handle shutdown requests right here
				log_error("shutting down");
				exit 0;
			}
			else
			{
				# pass off to appropriate module
				$request =~ s/module=(\w+)//;
				if ($1)
				{
					# print STDERR "module is $1\n";
					if (exists $module{$1})
					{
						my $module = $1;
						$request =~ s/output=(\d+)//;
						my $pipe = build_output_pipe($1);
						if ($pipe)
						{
							my $oldfh = select($pipe);
							$| = 1;
							$module{$module}->();
							select($oldfh);
							$pipe->close();
						}
						else
						{
							log_error("can't build output pipe [$1]");
						}
					}
					else
					{
						log_error("unknown module [$1]");
					}
				}
				else
				{
					log_error("malformed request [$request]");
				}
			}
		}
	}
}
# this really shouldn't be possible ...
die("popped out of infinite loop");


# subs

sub log_error
{
	my ($msg) = @_;

	print STDERR "$0: $msg at ", scalar(localtime(time())), "\n";
}

sub build_output_pipe
{
	my ($id) = @_;

	my $pipe_file = OUTPUT_FILE . $id;
	log_error($!) if system(MKNOD, $pipe_file, "p");
	return $id ? new FileHandle(">>$pipe_file") : undef;
}

sub test_module
{
	print "TEST OUTPUT";
}
