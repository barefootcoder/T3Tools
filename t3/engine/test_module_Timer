#! /usr/bin/perl -w

use strict;

use Barefoot::debug(1);						# comment out for production


use Carp;

use Barefoot::base;
use Barefoot::date;
use Barefoot::exception;
use Barefoot::T3::base;
use Barefoot::T3::Client;
use Barefoot::T3::Server;


use constant SLEEP_DELAY => 2;
use constant SYNCHRONOUS_CLIENTS => 1;

our $test_mod_dir = t3_config(T3::MODULEDIR_DIRECTIVE);


# main ()

print "=" x 40, "\n";
print "Note the following:\n";
print "1) If you get 'can't make modules dir' error, just run it again.\n";
print "   Most likely this is caused by premature death of a previous\n";
print "   test run and it will work fine the second time.\n";
print "2) If you get 'client(s) didn't clean up pipe(s)' error, you may\n";
print "   have stray pipes lying around from previous failed test runs.\n";
print "   Do 'rm t3.output*' and try again.\n";
print "3) If you get an unexpected error, check the t3engd.log file.  It\n";
print "   may have more information.  For instance, 'server never created\n";
print "   output pipe' is often caused by calling a module that you either\n";
print "   haven't implemented yet, or haven't registered (or both).  In\n";
print "   this case, the log file shows 'unknown module', which pinpoints\n";
print "   the problem nicely.\n";
print "=" x 40, "\n";

die("engine is still running") if `ps aux | grep 'perl -Tw .*t3engd'`;

make_test_modules_dir();
start_server();

my @children;					# save the child PIDs so we can reap them
for my $x (1..SYNCHRONOUS_CLIENTS)
{
	# simultaneous tests
	my $pid;
	$pid = fork and push @children, $pid and next;

	try
	{
		test_timer_module();
	}
	catch
	{
		shutdown_server();
		rethrow;				# don't lose original error
	};

	print "client run passed\n";
	open(FLAG, ">success$x") and close(FLAG);		# kludgy workaround
	exit 0;						# exit the child;
}
my $success = timeout
{
	foreach my $pid (@children)
	{
		waitpid $pid,0;
		die("child $pid failed") if $?;
	}

} 60;
die("got stuck while testing simultaneous processes") unless $success;

# make sure all children worked
my $child_failed = false;
for my $x (1..SYNCHRONOUS_CLIENTS)
{
	if (-e "success$x")
	{
		unlink("success$x");
	}
	else
	{
		print STDERR "child $x did not return a success flag\n";
		$child_failed = true;
	}
}
die("one or more children failed") if $child_failed;

shutdown_server();

# they all worked!
print "ALL TESTS PASSED\n";


# subs

BEGIN
{
	my $log_size;

	sub save_log_size
	{
		$log_size = -s "t3engd.log";
		die("can't get size for log file") unless $log_size;
	}

	sub get_last_log
	{
		# make sure save_log_size() was called
		die("can't call get_last_log before calling save_log_size!")
				unless defined $log_size;

		# sometimes we try to read the log before the server's finished
		# writing ... so we give ourselves a slight delay to help out
		sleep SLEEP_DELAY;

		#my $msg = `tail -1 t3engd.log`;
		my $msg;
		{
			open(LOG, "t3engd.log") or die("can't open log file");
			seek(LOG, $log_size + 1, 0);
			local $/ = undef;				# get whole rest of file
			$msg = <LOG>;
			undef $log_size;				# make sure we don't reuse this
		}

		T3::debug(3, "last log line: $msg");
		chomp $msg;
		return $msg;
	}
}


BEGIN
{
	my $module_to_test = "Timer";
	sub make_test_modules_dir
	{
		T3::debug(5, "starting make_test_modules_dir");

		die("can't make modules dir for testing") unless mkdir $test_mod_dir;
		# make the permissions right so the daemon doesn't freak out
		chmod 0700, $test_mod_dir;
		# put all the test modules in there
		system("cp modules/$module_to_test.pm $test_mod_dir");

		# make sure the dir gets cleaned up at the end
		# WARNING! this is a hardcoded "rm -rf", so BE CAREFUL!
		# the only reason it's really okay is that we know that we just created
		# this directory above (if it had already existed, the mkdir would have
		# failed, and we would have died before we got here)
		# if you do something wacky like commenting out the mkdir but leaving in
		# the rm -rf, you could really destroy something you don't want to
		END { system("rm -rf $test_mod_dir") };
	}
}


sub start_server
{
	T3::debug(5, "starting start_server");

	system("t3engd &");
	sleep SLEEP_DELAY;
	die("can't start server for testing")
			unless `ps aux | grep 'perl -Tw .*t3engd'`;
}


sub test_timer_module
{
	# create a fake timer file for testing
	my $tuser = "testy";
	my $start1 = date::dateTimeSeconds("1/1/00", "1:00pm");
	my $end1 = date::dateTimeSeconds("1/1/00", "2:00pm");
	my $start2 = date::dateTimeSeconds("5/1/00", "4:12pm");
	my $end2 = date::dateTimeSeconds("5/1/00", "5:49pm");
	my $test_file = t3_config(T3::TIMERDIR_DIRECTIVE) . "/$tuser.timer";
	open(TMR, ">$test_file") or die("can't create test timer file");
	print TMR join("\t", "test", "$start1-$end1,", "CLI", "PRJ",
			"PHZ", 0, ""), "\n";
	print TMR join("\t", "test2", "$start2-$end2,", "CLI", "PRJ",
			"", 0, ""), "\n";
	close(TMR);

	T3::Client::send_request("TIMER_LIST", "tl$$", { user => $tuser } );
	my @test_output = T3::Client::retrieve_output("tl$$");
	T3::debug(2, "timer module got output:\n" . join('', @test_output));
	unless (@test_output == 2
		and $test_output[0] eq "test\t1:00\n"
		and $test_output[1] eq "test2\t1:37\n")
	{
		T3::debug(2, "actual output: $test_output[0], $test_output[1]");
		die("timer module returned incorrect output");
	}

	T3::Client::send_request("TIMER_LIST", "tl$$",
			{ user => $tuser, timer => "test2" } );
	@test_output = T3::Client::retrieve_output("tl$$");
	T3::debug(2, "timer module got output:\n" . join('', @test_output));
	die("timer module returned incorrect output")
			unless @test_output == 1
			and $test_output[0] eq "test2\t1:37\n";

	T3::Client::send_request("TIMER_LIST", "tl$$",
			{ user => $tuser, timer => "test2", details => 'yes' } );
	@test_output = T3::Client::retrieve_output("tl$$");
	T3::debug(2, "timer module got output:\n" . join('', @test_output));
	unless (@test_output == 1
			and $test_output[0] eq "test2\t1:37\tCLI\tPRJ\t\t0\t"
					. "\t5/1/2000\t0\n")
	{
		T3::debug(2, "actual output: $test_output[0]");
		die("timer module returned incorrect output");
	}

	# clean up fake timer file
	unlink($test_file);
}


sub shutdown_server
{
	T3::Client::request_shutdown();
	if (`ps aux | grep 'perl -Tw .*t3engd'`)
	{
		system("kill `ps aux | grep 'perl -Tw .*t3engd' | awk '{print \$2}'`");
		die("server refuses to shutdown");
	}
}
