#! /usr/bin/perl

use strict;

use CGI;
#use Barefoot::debug;		# comment out for production

use Barefoot::input qw(input);
use Barefoot::format;

use Barefoot::T3;

# user "statuses" (offline, online, etc)
use constant OFFLINE => " ";
use constant ONLINE  => "*";
use constant BUSY    => "/";
use constant ERROR   => "?";
#use constant MESSAGE => "=";

my $inipath = "/export/usr/" . $::ENV{USER};
#$inipath .= "/timertest";			# comment out for production

T3::initialize($inipath);

print STDERR "$0: no server url defined in ini file\n" and exit(1)
		unless defined($T3::server_url);
print STDERR "$0: no user name defined in ini file\n" and exit(1)
		unless defined($T3::username);
print STDERR "$0: no server refresh interval defined in ini file\n" and exit(1)
		unless defined($T3::client_timeout);


# build most common messages
my (%online, %user_status, @waiting_messages, @waiting_delivs);
my $logon_message = T3::build_message(T3::LOGON_MESSAGE, $T3::username);
my $logoff_message = T3::build_message(T3::LOGOFF_MESSAGE, $T3::username);
my $alive_message = T3::build_message(T3::USER_ON_MESSAGE, $T3::username);
my $session_id = "";
my $message_id = "";
my $logon_msg = 0;
my $cur_status = "";

# Let's make sure any alarm signals that go astray don't do anything
$SIG{ALRM} = sub { };

my $current_message = $logon_message;		# start out with logon message

while (1)									# command "quit" will drop out
{
	alarm 0;								# turn off any impending alarms

	foreach (T3::send_message($current_message))
	{
		my $attr = T3::parse_message($_);
		my ($from, $to, $status, $time, $id, $message)
				= @{$attr}{'from', 'to', 'status', 'time', 'id', '_DATA_'};

		print STDERR "illegal MESSAGE: $_\n" and next unless defined $status;
		if ($status eq T3::ID_MESSAGE)
		{
			$logon_msg = 1;

			print STDERR "illegal ID: $id\n" and next unless defined $id;
			$session_id = substr($id, 0, -8);
			$message_id = sprintf "%.8lx", (hex(substr($id, -8, 8)) + 1);
		}
		elsif ($status eq T3::USER_OFF_MESSAGE)
		{
			$online{$from} = OFFLINE unless $online{$from} =~ /\d/;
			$user_status{$from} = decode_message($message);
		}
		elsif ($status eq T3::USER_ON_MESSAGE)
		{
			$online{$from} = ONLINE unless $online{$from} =~ /\d/;
			$user_status{$from} = decode_message($message);
		}
		elsif ($status eq T3::BUSY_MESSAGE)
		{
			$online{$from} = BUSY unless $online{$from} =~ /\d/;
			$user_status{$from} = decode_message($message);
		}
		elsif (($status eq T3::TALKER_MESSAGE) ||
			($status eq T3::NOREPLY_MESSAGE))
		{
			my $misdelivered = 1;
			foreach my $user (split (',', $to))
			{
				if ($user eq $T3::username)
				{
					$misdelivered = 0;
				}
				if ($user eq "ALL")
				{
					$misdelivered = 0;
				}
			}
			print STDERR "misdelivered message; should have gone to $to\n"
					and next if $misdelivered;

			if ($online{$from} =~ /\d/)
			{
				$online{$from} += 1;
			}
			else
			{
				$online{$from} = 1;
			}
			push @waiting_messages, "$from/$to/$time/$id/$message";

			# Send DELIVERED confirmation
			my $delivered_message = T3::build_message(T3::DELIVERED_MESSAGE,
					$T3::username, $from, $id);

			push @waiting_delivs, $delivered_message;
		}
		elsif ($status eq T3::ERROR_MESSAGE)
		{
			print STDERR "got ERROR: $message\n";
		}
		else
		{
			# Some other message type, probably DELIVERED or READ.
			# We don't care about those, so do nothing.
		}
	}

	if ($logon_msg)
	{
		# The server doesn't return a user list for the ID message.
		# So let's send it an ordinary ping to get that.

		$logon_msg = 0;
		$current_message = $alive_message;
		next;
	}
	if (@waiting_delivs)
	{
		$current_message = shift @waiting_delivs;
		next;
	}

	# print online/offline list
	print "\n\nCurrently online:\n";
	foreach my $user (sort {lc($a) cmp lc($b)} keys %online)
	{
		print "(", $online{$user}, ") $user";
		print "    [$user_status{$user}]" if $user_status{$user};
		print "\n";
	}

	# get out unless we accidentally got a message while trying to log out
	exit(0) if $current_message eq $logoff_message and not @waiting_messages;

	# now get the command input ... we wrap this in an eval so we can timeout
	# when we need to ... the sig handler for the alarm just dies, thus
	# exiting the eval ...
	eval
	{
		local $SIG{ALRM} = sub { die "alarm"; };
		alarm $T3::client_timeout;

		# our command "loop"
		COMMAND: {
			print "\n";
			print "Waiting messages!\a\n" if @waiting_messages;
			# go back to regular "ping" message next time through
			$current_message = $alive_message;
			my $command = input("Command:");

			# we've received a command;  kill the impending alarm
			# so that it won't interfere in processing the command
			# (especially if it's a send - you wouldn't want to 
			# timeout in the middle of typing your message)
			alarm 0;

			if ($command eq "get")
			{
				if (@waiting_messages)
				{
					# we'll just read one ... if there's more than one
					# waiting message, you'll need to do multiple "get"s
					my ($from, $to, $time, $id, $message)
							= split('/', shift @waiting_messages);
					my @message_lines = decode_message($message);

					# pretty up To field
					my $addresses = ($to eq $T3::username)?"you":$to;

					# build a full-screen format
					my $cols = 80;			# _should_ try to get term width
					my $format = '^' . '<' x ($cols - 4) . '~~';
					print "Message from $from to $addresses at ",
							scalar(localtime($time)), ":\n";
					foreach (@message_lines)
					{
						writeln($format, $_);
					}

					if ($online{$from} =~ /\d/
						&& $online{$from} > 1)
					{
						$online{$from} -= 1;
					}
					else
					{
						$online{$from} = ERROR;
					}
					
					# Send READ confirmation
					$current_message = T3::build_message(T3::READ_MESSAGE,
							$T3::username, $from, $id);

					# pause for user to read messages
					my $pause = input("Press Enter to continue:");
				}
				else
				{
					# can't get if there's nothing to get
					print "No waiting messages\n";
				}

				# break out; the outer loop will recheck
				die "breaking out";
			}
			elsif (($command eq "send") || ($command =~ /^send (.*)\s*$/))
			{
				my $tolist;
				if ($command eq "send")
				{
					$tolist = input("To:");
				}
				else
				{
					$tolist = $1;
				}

				my $keepmsg = 1;
				foreach my $to (split (',', $tolist))
				{
					# no messaging to people who don't exist
					if (($to ne "ALL") && (not exists $online{$to}))
					{
						print "Unrecognized user $to\n";
						print "Specify comma-delimited users only\n";
						$keepmsg = 0;
					}
				}

				if ($keepmsg)
				{
					# get a bunch of lines till they type ^D
					print "Enter message, terminated with ^D:\n";
					my @lines = <STDIN>;

					$current_message = T3::build_message(T3::TALKER_MESSAGE,
							$T3::username, $tolist, $session_id . $message_id,
							"", "", @lines);
					$message_id = sprintf "%.8lx", (hex($message_id) + 1);
				}
				# hop out so the outer loop will send the message
				die "breaking out";
			}
			elsif ($command eq "refresh")
			{
				# just break out; the outer loop will recheck
				die "breaking out";
			}
			elsif ($command =~ /busy (.*)\s*$/)
			{
				$alive_message = T3::build_message(T3::BUSY_MESSAGE, $T3::username,
						"", "", "", "", $1);
				$current_message = $alive_message;
				die "breaking out";
			}
			elsif ($command eq "unbusy")
			{
				$alive_message = T3::build_message(T3::USER_ON_MESSAGE, $T3::username,
						"", "", "", "", $cur_status);
				$current_message = $alive_message;
				die "breaking out";
			}
			elsif ($command =~ /status (.*)\s*$/)
			{
				$cur_status = $1;
				$alive_message = T3::build_message(T3::USER_ON_MESSAGE, $T3::username,
						"", "", "", "", $cur_status);
				$current_message = $alive_message;
				die "breaking out";
			}
			elsif ($command eq "clear status")
			{
				$cur_status = "";
				$alive_message = T3::build_message(T3::USER_ON_MESSAGE, $T3::username);
				$current_message = $alive_message;
				die "breaking out";
			}
			elsif ($command eq "help")
			{
				print "Valid commands are:\n";
				print "send [user]           get           "
						. "refresh              help\n";
				print "busy [message]        unbusy        "
						. "status [message]     clear status\n";
				print "quit\n";
			}
			elsif ($command eq "quit")
			{
				# reset message to logging out, then hop out of the eval
				$current_message = $logoff_message;
				die "breaking out";
			}
			else
			{
				# watchoo talkin bout, willis?
				print "Unrecognized command!\n";
			}

			# this is roughly equivalent to a goto, but it looks nicer <s>
			redo COMMAND;
		}

		print "\n";
	};
}

sub decode_message
{
	my ($message) = @_;

	# these decoding functions unnecessary with new CGI server
	# decode CGI encoding
	#$message =~ s/%(..)/ chr(hex($1)) /eg;
	# other talker client uses +'s for spaces
	#$message =~ s/\+/ /g;

	# however, we do need to unescape the special HTML stuff
	$message = CGI::unescapeHTML($message);

	# split message into distinct lines

	return wantarray ? split(/\r?\n/, $message) : $message;
}
