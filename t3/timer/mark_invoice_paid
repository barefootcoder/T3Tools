#! /usr/bin/perl

use strict;

use Barefoot::date;
use Barefoot::input qw<get_yn input>;
use Barefoot::DataStore;
use Barefoot::DataStore::DataSet;

use Barefoot::T3::base;


################
#    main()    #
################

my $inv_num = $ARGV[0] || input("\nInvoice number:");


my $data = &t3->load_data('

		select client_id, invoice_billdate, invoice_amount, invoice_paydate
		from {@invoice}
		where invoice_number = {inv_num}
',
		inv_num => $inv_num,

) or die("database error: ", &t3->last_error());
die("invoice number not found") unless @$data == 1;

my $row = $data->[0];
my ($client, $bill_date, $amount, $pay_date) = @$row;

print "\nInvoice for client $client: "
		. "$amount billed on $bill_date\n";
if (defined $pay_date)
{
	print "This invoice was already marked paid as of $pay_date\n";
	exit 2;
}
exit 1 unless get_yn("Is this right?");


$pay_date = input("\nPaid on date:", date::today(),
	{
		VALID		=>	\&date::isValid,
		VALID_ERR	=>	"illegal date!",
	}
);


&t3->begin_tran();
update_invoice($pay_date, "wrong number of rows returned");
&t3->rollback();

print "\nInitial attempt successful for invoice $inv_num, client $client,\n";
print "    pay date $pay_date (1 row affected)\n";
exit 1 unless get_yn("Proceed?");

&t3->begin_tran();
update_timer($pay_date, "theoretically impossible error occurred");
&t3->commit();

print "\nmark was successful\n";


sub update_invoice
{
	my ($pay_date, $message) = @_;

	my $res = &t3->do('

			update {@invoice}
			set invoice_paydate = {pay_date},
					chguser = {user}, chgdate = {&curdate}
			where invoice_number = {inv_num}
	',
			pay_date => $pay_date, inv_num => $inv_num,
			user => t3_username(),
	) or die("can't update invoice: ", &t3->last_error());
	die("$message: ", &t3->last_error()) unless $res->rows_affected() == 1;
}
