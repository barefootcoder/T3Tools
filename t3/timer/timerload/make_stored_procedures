#! /bin/ksh  

# For RCS:
# $Date$
# $Log$
# Revision 1.13  2001/01/10 17:05:25  tryan
# Altered calc_salary_pay and calc_insurance_contribution to sync w/changes
# (use payroll_id in salary_bank instead of start_date,check_date etc).
#
# Revision 1.12  2001/01/09 19:27:37  tryan
# Added insurance_amount, calc_insurance_contribution.
#
# Revision 1.11  2000/11/16 23:11:27  tryan
# Altered some formatting in calc_salary_pay
#
# Revision 1.10  2000/11/14 17:03:39  tryan
# Altered proc calc_salary_pay to use latest salary_bank record
# occurring before start_date variable, rather than max (end_date).
#
# Revision 1.9  2000/11/13 20:30:39  tryan
# Added requires_billing to pay_amount.
# Added salary_amount table and calc_salary_pay sproc.
#
# Revision 1.8  2000/10/31 21:48:01  buddy
# added phase to pay_amount
# fixed calc_pay_amount to handle phases in pay_rate
#
# Revision 1.7  2000/10/10 05:27:40  buddy
# added phase-specific billing ratios
#
# Revision 1.6  2000/03/29 20:25:56  buddy
# changed stored procedures to match new commission table structure
# added new table (profit_client) to calc_profit
# changed *_comm_amount tables to have consistent columns (needed)
#     by mark_commission script)
#
# Revision 1.5  2000/03/16 17:03:11  buddy
# updated to work with new timer db
#
# Revision 1.4  2000/01/26 05:18:13  buddy
# some changes for training rates to work
#
# Revision 1.3  1999/12/10 04:23:23  buddy
# major changes to the way training rates are calculated:
#     no calculation until project completed
#     zeroing out of log (payroll) rows for training classes (this keeps
#          these rows from affecting profit calculations)
#     have to insert bill_rate along with 'training work' rows (otherwise
#          referall commission doesn't get calc'ed for some strange reason)
#
# Revision 1.2  1999/10/28 14:18:20  buddy
# removed stuff relegated to make_rates
# added handling for training rates
# various bug fixes
#
# Revision 1.1  1999/09/01 17:52:13  buddy
# Initial revision
#
# Revision 1.1  1999/01/04 19:46:09  buddy
# Initial revision (of make_rates, where this was originally)
#
# $Id$
# $Revision$

. /home/buddy/proj/timerweb/kshlib

server=SYBASE_1
user=$USER
destdb=timertest

while getopts ":S:U:D:h" opt
do
	case $opt in
		S)  server=$OPTARG
			;;
		U)  user=$OPTARG
			;;
		D)  destdb=$OPTARG
			;;
		h)  echo "usage: $0 [-Sserver] [-Uusername] [-Ddest_db]" >&2
			echo "   defaults are -S$server -U$user -D$destdb" >&2
			exit
			;;
		:)  echo "$0: $OPTARG requires an argument ($0 -h for usage)" >&2
			exit
			;;
		\?) echo "illegal option; $0 -h for usage" >&2
			exit
	esac
done

#./rq -S$server -U$user -D$destdb <<-END
run_query -S$server -U$user -D$destdb <<-END

	-- stored procedures for figuring billing / commission information


	-- these need several tables to hold temporary calculations
	-- these tables *must* be cleared out before calling the stored procedures!
	-- note also that all permissions are granted to public on these tables
	-- so that any user may use the procedures

	-- table for holding pay rates and pay amounts
	print "Creating table pay_amount"
	go
	$(overwrite_table pay_amount "
		log_source			table_name		NOT NULL,
		log_id				unique_id		NOT NULL,
		emp					internal_id		NOT NULL,
		client				internal_id		NOT NULL,
		proj				internal_id		NOT NULL,
		phase				internal_id		NULL,
		date				datetime		NOT NULL,
		hours				numeric(5,2)	NOT NULL,
		requires_payment	bit				NOT NULL,
		requires_billing	bit				NOT NULL,
		pay_rate			money			NULL,
		pay_rate_type		type_id			NULL,
		total_pay			money			NULL,
	")
	print "Granting rights on table pay_amount"
	go

	grant all on pay_amount to public
	go
    -- table for calculating amount to pay salaried employees
	-- and how much goes to the bank.
	print "Creating table salary_amount"
	go
    $(overwrite_table salary_amount "
         emp                            char(3) 	NOT NULL,
         bank_before                    money 		NULL,
         total_pay                      money 		NULL,
         amount_per_period              money 		NULL,
         max_debit_amt                  money 		NULL,
         max_overage_amt                money 		NULL,
         overcap_threshold_amt          money 		NULL,
         undercap_threshold_amt         money 		NULL,
         overage_amt                    money 		NULL,
         overcap_amt                    money 		NULL,
         bank_adjust                    money 		NULL,
         bank_after                     money 		NULL,
         actual_pay                     money 		NULL,
    ")
	print "Granting rights on table salary_amount"
	go
	grant all on salary_amount to public
	go

	-- table for holding the various calculations results
	print "Creating table profit_item"
	go
	$(overwrite_table profit_item "
		profit_id			unique_id		IDENTITY,
		client				internal_id		NOT NULL,
		proj				internal_id		NULL,
		start_date			datetime		NOT NULL,
		end_date			datetime		NOT NULL,
		log_source			table_name		NULL,
		log_id				unique_id		NULL,
		units				numeric(6,2)	NOT NULL,
		price_per_unit		money			NOT NULL,
		total_price			money			NULL,
		total_cost			money			NULL,
		sales_commission	money			NULL,
		ref_commission		money			NULL,
		emp_commission		money			NULL,
		simple_profit		money			NULL,
	")
	go
	print "Granting rights on table profit_item"
	go

	grant all on profit_item to public
	go

	-- a slightly more compact version of the profit_item table (w/ margin)
	print "Creating table profit_client"
	go
	$(overwrite_table profit_client "
		client				internal_id		NOT NULL,
		proj				internal_id		NULL,
		start_date			datetime		NOT NULL,
		end_date			datetime		NOT NULL,
		units				numeric(6,2)	NOT NULL,
		total_price			money			NOT NULL,
		total_cost			money			NOT NULL,
		sales_commission	money			NOT NULL,
		ref_commission		money			NOT NULL,
		emp_commission		money			NOT NULL,
		simple_profit		money			NOT NULL,
		margin				percentage		NULL,
	")
	print "Granting rights on table profit_client"
	go

	grant all on profit_client to public
	go

	print "Creating table time_log_profit"
	go
	$(overwrite_table time_log_profit "
		log_source			table_name		NOT NULL,
		log_id				unique_id		NOT NULL,
		emp					internal_id		NOT NULL,
		client				internal_id		NOT NULL,
		proj				internal_id		NOT NULL,
		phase				internal_id		NULL,
		date				datetime		NOT NULL,
		hours				numeric(5,2)	NOT NULL,
		start_date			datetime		NOT NULL,
		end_date			datetime		NOT NULL,
		requires_payment	bit				NOT NULL,
		resource_billing	bit				NOT NULL,
		class_billing		bit				NOT NULL,
		fixed_price_days	int				NULL,
		bill_rate			money			NULL,
		billing_ratio		numeric(4,3)	NOT NULL,
		pay_rate_type		type_id			NULL,
		total_pay			money			NULL,
		sum_by_proj			bit				NOT NULL,
	")
	print "Granting rights on table time_log_profit"
	go

	grant all on time_log_profit to public
	go

	-- this one is specifically for sales commissions
	print "Creating table sales_comm_amount"
	go
	$(overwrite_table sales_comm_amount "
		profit_id			unique_id		NOT NULL,
		pay_type			char(1)			NOT NULL,
		pay_to				internal_id		NOT NULL,
		name				description		NULL,
		client				internal_id		NOT NULL,
		proj				internal_id		NULL,
		commission_percent	percentage		NOT NULL,
		amount				money			NULL,
	")
	print "Granting rights on table sales_comm_amount"
	go

	grant all on sales_comm_amount to public
	go

	-- and this one is specifically for referral commissions
	print "Creating table referral_comm_amount"
	go
	$(overwrite_table referral_comm_amount "
		profit_id			unique_id		NOT NULL,
		pay_type			char(1)			NOT NULL,
		pay_to				internal_id		NOT NULL,
		name				description		NULL,
		emp					internal_id		NOT NULL,
		hours				numeric(5,2)	NOT NULL,
		commission			smallmoney		NOT NULL,
		amount				money			NULL,
	")
	print "Granting rights on table referral_comm_amount"
	go

	grant all on referral_comm_amount to public
	go

	-- and this one is (surprise, surprise) for employee commissions
	print "Creating table employee_comm_amount"
	go
	$(overwrite_table employee_comm_amount "
		profit_id			unique_id		NOT NULL,
		pay_type			char(1)
				default 'E'					NOT NULL
				check (pay_type = 'E'),
		pay_to				internal_id		NOT NULL,
		name				description		NULL,
		date				datetime		NOT NULL,
		pay_to_employee		money			NOT NULL,
		total_pay			money			NOT NULL,
		employee_percent	numeric(6,5)	NULL,
		gross				money			NULL,
		diff				money			NULL,
		amount				money			NULL,
	")
	print "Granting rights on table employee_comm_amount"
	go

	grant all on employee_comm_amount to public
	go

	-- you have to figure out what this is for on your own
	print "Creating table admin_comm_amount"
	go
	$(overwrite_table admin_comm_amount "
		profit_id			unique_id		NULL,
		admin_comm			internal_id		NOT NULL,
		pay_type			char(1)			NOT NULL,
		pay_to				internal_id		NOT NULL,
		name				description		NULL,
		comm_start_date		datetime		NOT NULL,
		comm_end_date		datetime		NOT NULL,
		commission_percent	percentage		NOT NULL,
		simple_profit		money			NOT NULL,
		amount				money			NULL,
	")
	print "Granting rights on table admin_comm_amount"
	go

	grant all on admin_comm_amount to public
	go


	-- first procedure figures total price (i.e., all billing stuff)
	-- this one expectes both time_log_profit and profit_item to be
	-- "filled up", so please use the ksh function $build_profit_item
	-- to insure consistency of initial data
	print "Creating proc calc_total_price"
	go

	$(drop_procedure calc_total_price)

	create procedure calc_total_price
	as

		-- get any billing ratios that might apply
		-- STEP 1: general client billing ratios
		update time_log_profit
		set billing_ratio = brat.ratio
		from time_log_profit tlp, billing_ratio brat
		where tlp.emp = brat.emp
		and tlp.client = brat.client
		and brat.proj is NULL
		and brat.phase is NULL
		and tlp.date between brat.start_date and brat.end_date
		-- STEP 2: project specific billing ratios
		update time_log_profit
		set billing_ratio = brat.ratio
		from time_log_profit tlp, billing_ratio brat
		where tlp.emp = brat.emp
		and tlp.client = brat.client
		and tlp.proj = brat.proj
		and brat.phase is NULL
		and tlp.date between brat.start_date and brat.end_date
		-- STEP 3: phase specific billing ratios
		update time_log_profit
		set billing_ratio = brat.ratio
		from time_log_profit tlp, billing_ratio brat
		where tlp.emp = brat.emp
		and tlp.client = brat.client
		and tlp.proj = brat.proj
		and tlp.phase = brat.phase
		and tlp.date between brat.start_date and brat.end_date

		-- now figure billing rate
		-- STEP 1: "regular" billing rates
		update time_log_profit
		set bill_rate = br.rate, fixed_price_days = br.fixed_price_days
		from time_log_profit tlp, bill_rate br
		where tlp.resource_billing = 0
		and tlp.class_billing = 0
		and tlp.client = br.client
		and tlp.proj = br.proj
		and tlp.date between br.start_date and br.end_date
		-- STEP 2: resource billing rates (all phases)
		update time_log_profit
		set bill_rate = rr.rate
		from time_log_profit tlp, resource_employee re, resource_rate rr
		where tlp.resource_billing = 1
		and tlp.class_billing = 0
		and tlp.emp = re.emp
		and re.phase is NULL
		and tlp.client = re.client
		and tlp.date between re.start_date and re.end_date
		and re.client = rr.client
		and re.resrc = rr.resrc
		and tlp.date between rr.start_date and rr.end_date
		-- STEP 3: resource billing rates (phase specific)
		update time_log_profit
		set bill_rate = rr.rate
		from time_log_profit tlp, resource_employee re, resource_rate rr
		where tlp.resource_billing = 1
		and tlp.class_billing = 0
		and tlp.emp = re.emp
		and tlp.phase = re.phase
		and tlp.client = re.client
		and tlp.date between re.start_date and re.end_date
		and re.client = rr.client
		and re.resrc = rr.resrc
		and tlp.date between rr.start_date and rr.end_date

		-- insert individual time logs
		insert profit_item
			(client, proj, start_date, end_date, log_source, log_id, units,
					price_per_unit)
		select tlp.client, tlp.proj, tlp.start_date, tlp.end_date,
				tlp.log_source, tlp.log_id,
				$(round "tlp.hours / tlp.billing_ratio" c.to_nearest U),
				bill_rate
		from time_log_profit tlp, client c
		where tlp.class_billing = 0
		and tlp.sum_by_proj = 0
		and tlp.fixed_price_days is NULL
		and tlp.client = c.client
		and tlp.bill_rate is not NULL

		-- sum "full project" time logs
		insert profit_item
			(client, proj, start_date, end_date, log_source, units,
					price_per_unit)
		select tlp.client, tlp.proj, tlp.start_date, tlp.end_date,
				'time_log SUM', 1,
				sum($(round "tlp.hours / tlp.billing_ratio" c.to_nearest U)
						* tlp.bill_rate)
		from time_log_profit tlp, client c
		where tlp.class_billing = 0
		and tlp.sum_by_proj = 1
		and tlp.fixed_price_days is NULL
		and tlp.client = c.client
		and tlp.bill_rate is not NULL
		group by tlp.client, tlp.proj, tlp.start_date, tlp.end_date

		-- in order to figure out fixed price days stuff, we
		-- have to figure out which periods apply
		-- note that for this particular one, it won't matter whether
		-- it's "full project" billing or not
		-- PLEASE NOTE! if the dates passed to this procedure don't line
		-- up with the boundaries of fixed price days billing periods,
		-- you're likely to get pretty strange results
		insert profit_item
			(client, proj, start_date, end_date, log_source, units,
					price_per_unit)
		select distinct client, proj,
				$(period_start "$(period_num date fixed_price_days)"		\
						fixed_price_days),
				$(period_end "$(period_num date fixed_price_days)"			\
						fixed_price_days),
				'time_log FIXED', 1, bill_rate
		from time_log_profit
		where fixed_price_days is not NULL
		and bill_rate is not NULL

		-- whew! now that we have all the profit items set, we can calculate
		-- the total price (which is after all the point of all this)
		update profit_item
		set total_price = units * price_per_unit

	go
	print "Granting rights on proc calc_total_price"
	go

	grant execute on calc_total_price to public
	go


	-- second procedure calculates sales commission
	-- (expects that calc_total_price has already been run)
	print "Creating proc calc_sales_commission"
	go

	$(drop_procedure calc_sales_commission)

	create procedure calc_sales_commission
	as

		-- clear out old records
		delete sales_comm_amount

		-- first, put project specific sales commissions in our holding table
		insert sales_comm_amount
			(profit_id, pay_type, pay_to, client, proj, commission_percent)
		select pi.profit_id, sc.pay_type, sc.pay_to, pi.client, pi.proj,
				sc.commission_percent
		from profit_item pi, sales_commission sc
		where pi.client = sc.client
		and pi.proj = sc.proj
		and pi.end_date between sc.start_date and sc.end_date

		-- now, general client sales comms, but not if already superseded
		insert sales_comm_amount
			(profit_id, pay_type, pay_to, client, proj, commission_percent)
		select pi.profit_id, sc.pay_type, sc.pay_to, pi.client, pi.proj,
				sc.commission_percent
		from profit_item pi, sales_commission sc
		where pi.client = sc.client
		and sc.proj is NULL
		and pi.end_date between sc.start_date and sc.end_date
		and not exists
		(
			select 1
			from sales_comm_amount sca2
			where pi.profit_id = sca2.profit_id
		)

		-- get the name of the commission payee if an employee
		update sales_comm_amount
		set name = $(employee_name e)
		from sales_comm_amount sca, employee e
		where sca.pay_type = 'E'
		and sca.pay_to = e.emp

		-- get the name of the commission payee if a salesman
		update sales_comm_amount
		set name = s.name
		from sales_comm_amount sca, salesman s
		where sca.pay_type = 'S'
		and sca.pay_to = s.salesman

		-- now figure the amounts of the commissions (not too tough)
		update sales_comm_amount
		set amount = $(round "pi.total_price * sca.commission_percent
				/ 100.0" .01 O)
		from sales_comm_amount sca, profit_item pi
		where sca.profit_id = pi.profit_id

		-- have to have a temp table so we can update the profit_item table
		select profit_id, sum(amount) "total_sales_comm"
		into #sales_comm_totals
		from sales_comm_amount
		group by profit_id

		-- finally update the profit item table
		update profit_item
		set sales_commission = sct.total_sales_comm
		from profit_item pi, #sales_comm_totals sct
		where pi.profit_id = sct.profit_id

	go
	print "Granting rights on proc calc_sales_commission"
	go

	grant execute on calc_sales_commission to public
	go


	-- third procedure calculates referral commission
	-- (also expects that calc_total_price has already been run)
	print "Creating proc calc_referral_commission"
	go

	$(drop_procedure calc_referral_commission)

	create procedure calc_referral_commission
	as
		
		-- clear out old values
		delete referral_comm_amount

		-- first get the "one-to-one" time logs
		insert referral_comm_amount
			(profit_id, pay_type, pay_to, emp, hours, commission)
		select pi.profit_id, rc.pay_type, rc.pay_to, tlp.emp, tlp.hours,
				rc.commission
		from profit_item pi, time_log_profit tlp, referral_commission rc
		where pi.log_source = tlp.log_source
		and pi.log_id = tlp.log_id
		and tlp.emp = rc.emp
		and tlp.date between rc.start_date and rc.end_date

		-- next, everything else (except the materials logs)
		insert referral_comm_amount
			(profit_id, pay_type, pay_to, emp, hours, commission)
		select pi.profit_id, rc.pay_type, rc.pay_to, tlp.emp, tlp.hours,
				rc.commission
		from profit_item pi, time_log_profit tlp, referral_commission rc
		where pi.log_source in ('time_log FIXED', 'time_log SUM',
				'class_log', 'class_log SUM')
		and pi.client = tlp.client
		and pi.proj = tlp.proj
		and tlp.date between pi.start_date and pi.end_date
		and tlp.emp = rc.emp
		and tlp.date between rc.start_date and rc.end_date

		-- get the name of the commission payee if an employee
		update referral_comm_amount
		set name = $(employee_name e)
		from referral_comm_amount rca, employee e
		where rca.pay_type = 'E'
		and rca.pay_to = e.emp

		-- get the name of the commission payee if a salesman
		update referral_comm_amount
		set name = s.name
		from referral_comm_amount rca, salesman s
		where rca.pay_type = 'S'
		and rca.pay_to = s.salesman

		-- now get the actual amount
		update referral_comm_amount
		set amount = $(round "hours * commission" .01 O)

		-- build our temp table we need for updating profit_item
		select profit_id, sum(amount) "total_ref_comm"
		into #ref_comm_totals
		from referral_comm_amount
		group by profit_id

		-- and update it
		update profit_item
		set ref_commission = rct.total_ref_comm
		from profit_item pi, #ref_comm_totals rct
		where pi.profit_id = rct.profit_id

	go
	print "Granting rights on proc calc_referral_commission"
	go

	grant execute on calc_referral_commission to public
	go


	-- this little procedure figures out pay_rates
	-- we sometimes need to do this independent of the other procedures,
	-- so this one doesn't expect anything but $build_pay_amount or
	-- $build_profit_item (which itself calls $build_pay_amount) to have
	-- been run ... it is called by calc_total_cost (below)
	print "Creating proc calc_pay_amount"
	go

	$(drop_procedure calc_pay_amount)

	create procedure calc_pay_amount
	as

		-- get general employee rates
		update pay_amount
		set pay_rate = pr.rate, pay_rate_type = pr.rate_type
		from pay_amount pa, pay_rate pr
		where pa.emp = pr.emp
		and pr.client is NULL
		and pr.proj is NULL
		and pr.phase is NULL
		and pa.date between pr.start_date and pr.end_date

		-- get general employee/phase rates
		update pay_amount
		set pay_rate = pr.rate, pay_rate_type = pr.rate_type
		from pay_amount pa, pay_rate pr
		where pa.emp = pr.emp
		and pr.client is NULL
		and pr.proj is NULL
		and pa.phase = pr.phase
		and pa.date between pr.start_date and pr.end_date

		-- get general employee/client rates
		update pay_amount
		set pay_rate = pr.rate, pay_rate_type = pr.rate_type
		from pay_amount pa, pay_rate pr
		where pa.emp = pr.emp
		and pa.client = pr.client
		and pr.proj is NULL
		and pr.phase is NULL
		and pa.date between pr.start_date and pr.end_date

		-- get general employee/client/phase rates
		update pay_amount
		set pay_rate = pr.rate, pay_rate_type = pr.rate_type
		from pay_amount pa, pay_rate pr
		where pa.emp = pr.emp
		and pa.client = pr.client
		and pr.proj is NULL
		and pa.phase = pr.phase
		and pa.date between pr.start_date and pr.end_date

		-- get specific employee/client/project rates
		update pay_amount
		set pay_rate = pr.rate, pay_rate_type = pr.rate_type
		from pay_amount pa, pay_rate pr
		where pa.emp = pr.emp
		and pa.client = pr.client
		and pa.proj = pr.proj
		and pr.phase is NULL
		and pa.date between pr.start_date and pr.end_date

		-- get specific employee/client/project/phase rates
		update pay_amount
		set pay_rate = pr.rate, pay_rate_type = pr.rate_type
		from pay_amount pa, pay_rate pr
		where pa.emp = pr.emp
		and pa.client = pr.client
		and pa.proj = pr.proj
		and pa.phase = pr.phase
		and pa.date between pr.start_date and pr.end_date

		-- now figure the actual total pay
		update pay_amount
		set total_pay = $(round "pay_rate * hours" .01 U)
		where requires_payment = 1

		-- things that don't require payment are of course 0
		update pay_amount
		set total_pay = 0
		where requires_payment = 0

	go
	print "Granting rights on proc calc_pay_amount"
	go

	grant execute on calc_pay_amount to public
	go


	-- next procedure figures out the total cost
	-- (again, expects that calc_total_price has already been run)
	print "Creating proc calc_total_cost"
	go

	$(drop_procedure calc_total_cost)

	create procedure calc_total_cost
	as
		
		-- handle the easy ones first
		-- materials_log has total cost already in it
		update profit_item
		set total_cost = ml.amount_paid
		from profit_item pi, materials_log ml
		where pi.log_source = ml.log_source
		and pi.log_id = ml.log_id

		-- now fill in the pay_rates for pay_amount
		execute calc_pay_amount

		-- update time_log_profit from pay_amount
		-- note that this join doesn't check log_source, but this should
		-- be okay since both time_log_profit and pay_amount should be
		-- filled up from time_log (only) ... if this is ever different,
		-- this update will no longer work properly
		update time_log_profit
		set pay_rate_type = pa.pay_rate_type, total_pay = pa.total_pay
		from time_log_profit tlp, pay_amount pa
		where tlp.log_id = pa.log_id

		-- can update "one to one" time logs directly
		update profit_item
		set total_cost = tlp.total_pay
		from profit_item pi, time_log_profit tlp
		where pi.log_source = tlp.log_source
		and pi.log_id = tlp.log_id

		-- build a temp table for updating everything else
		select pi.profit_id, sum(tlp.total_pay) "total_cost"
		into #total_cost
		from profit_item pi, time_log_profit tlp
		where pi.log_source in ('time_log FIXED', 'time_log SUM',
				'class_log', 'class_log SUM')
		and pi.client = tlp.client
		and pi.proj = tlp.proj
		and tlp.date between pi.start_date and pi.end_date
		group by pi.profit_id

		-- and update the total_cost
		update profit_item
		set total_cost = tc.total_cost
		from profit_item pi, #total_cost tc
		where pi.profit_id = tc.profit_id

	go
	print "Granting rights on proc calc_total_cost"
	go

	grant execute on calc_total_cost to public
	go


	-- the next procedure is to handle employee commissions
	-- (this one requires that calc_total_cost (and not just
	-- calc_total_price) have been run)
	print "Creating proc calc_employee_commission"
	go

	$(drop_procedure calc_employee_commission)

	create procedure calc_employee_commission
	as

		-- clear out old values
		delete employee_comm_amount

		-- get the "one on one" time logs
		insert employee_comm_amount
			(profit_id, pay_to, date, pay_to_employee, total_pay)
		select pi.profit_id, tlp.emp, tlp.date, tlp.total_pay, pi.total_cost
		from profit_item pi, time_log_profit tlp
		where pi.log_source = tlp.log_source
		and pi.log_id = tlp.log_id
		and tlp.requires_payment = 1
		and tlp.pay_rate_type != 'S'

		-- now the other time logs
		insert employee_comm_amount
			(profit_id, pay_to, date, pay_to_employee, total_pay)
		select pi.profit_id, tlp.emp, tlp.date,
				sum(tlp.total_pay), pi.total_cost
		from profit_item pi, time_log_profit tlp
		where pi.log_source in ('time_log FIXED', 'time_log SUM',
				'class_log', 'class_log SUM')
		and pi.client = tlp.client
		and pi.proj = tlp.proj
		and tlp.date between pi.start_date and pi.end_date
		and tlp.requires_payment = 1
		and tlp.pay_rate_type != 'S'
		group by pi.profit_id, tlp.emp, tlp.date, pi.total_cost

		-- get the name of the commission payee (it's always an employee)
		update employee_comm_amount
		set name = $(employee_name e)
		from employee_comm_amount eca, employee e
		where eca.pay_to = e.emp

		-- now figure the percent of total pay that applies to this employee
		-- (note that for the "one to one" logs, this will always be 100%)
		update employee_comm_amount
		set employee_percent = pay_to_employee / total_pay

		-- now figure the adjusted price (i.e., total price - sales comm
		-- and ref comm) and the difference between adjusted cost and total
		-- cost; for historical reasons, these are called the gross and diff
		update employee_comm_amount
		set gross = employee_percent * (pi.total_price
				- isnull(pi.sales_commission,0) - isnull(pi.ref_commission,0))
		from employee_comm_amount eca, profit_item pi
		where eca.profit_id = pi.profit_id
		update employee_comm_amount
		set diff = gross - pay_to_employee

		-- now the commission itself
		-- old formula (previous to magic date of 9/7/98) is easy
		update employee_comm_amount
		set amount = diff * .04
		where date < '9/7/98'
		and diff > 0
		-- (this formula is somewhat bitchy)
		declare @rate_factor real, @breakeven_factor real, @flare_factor real
		select @rate_factor = 12.0
		select @breakeven_factor = 3.0
		select @flare_factor = 20.0
		update employee_comm_amount
		set amount = convert(money,
		 		diff * diff / (
					(gross / @rate_factor) -
							(diff - gross / @breakeven_factor) / @flare_factor
				) / 100.0
			)
		where date >= '9/7/98'
		and diff > 0

		-- round to avoid silly summing mismatches
		update employee_comm_amount
		set amount = $(round amount .01 O)

		-- once again, make our temp table
		select profit_id, sum(amount) "total_emp_comm"
		into #emp_comm_totals
		from employee_comm_amount
		group by profit_id

		-- and use it to update
		update profit_item
		set emp_commission = ect.total_emp_comm
		from profit_item pi, #emp_comm_totals ect
		where pi.profit_id = ect.profit_id

	go
	print "Granting rights on proc calc_employee_commission"
	go

	grant execute on calc_employee_commission to public
	go


	-- this last one calls all the others and does a few little extra things
	-- (okay, it's the next to last one; see below)
	print "Creating proc calc_profit"
	go

	$(drop_procedure calc_profit)

	create procedure calc_profit
	as

		execute calc_total_price
		execute calc_sales_commission
		execute calc_referral_commission
		execute calc_total_cost
		execute calc_employee_commission

		-- fixup NULL commissions; NULL won't add properly
		-- STEP 1: sales commission
		update profit_item
		set sales_commission = 0
		where sales_commission is NULL
		-- STEP 2: referral commission
		update profit_item
		set ref_commission = 0
		where ref_commission is NULL
		-- STEP 3: employee commission
		update profit_item
		set emp_commission = 0
		where emp_commission is NULL

		-- simple profit calculation is basic subtraction
		update profit_item
		set simple_profit = total_price - total_cost - sales_commission
				- ref_commission - emp_commission

		-- clear this out
		delete profit_client

		-- fill up profit_client for some helpful reporting stuff
		insert profit_client
			(client, proj, start_date, end_date, units, total_price,
					total_cost, sales_commission, ref_commission,
					emp_commission, simple_profit)
		select pi.client, pi.proj, min(pi.start_date), max(pi.end_date),
				sum(pi.units), sum(pi.total_price), sum(pi.total_cost),
				sum(pi.sales_commission), sum(pi.ref_commission),
				sum(pi.emp_commission), sum(pi.simple_profit)
		from profit_item pi
		group by pi.client, pi.proj

		-- margin calculation is pretty basic
		-- (make sure you don't divide by zero or get negative margins
		-- or magins over 100%)
		update profit_client
		set margin = $(round "100.0 * simple_profit / total_price" .01 O)
		where total_price > 0
		and simple_profit > 0
		and total_price > simple_profit

	go
	print "Granting rights on proc calc_profit"
	go

	grant execute on calc_profit to public
	go

	-- you have to call calc_profit before calling this one
	-- (or you could call each of the sub-proceduress individually, if you
	-- happened to be masochistic or something)
	print "Creating proc calc_admin_commission"
	go

	$(drop_procedure calc_admin_commission)

	create procedure calc_admin_commission
	as

		-- clear out old values
		delete admin_comm_amount

		-- for admin_commission, *everything* in the profit_item table is
		-- applicable, so we don't track the profit_id ...  this is also
		-- important to insure that admin commissions (which are often
		-- pretty small) don't lose anything from overenthusiastic
		-- rounding ... if you need to know which profit_id's apply (e.g.,
		-- for mark_commission script), the answer is easy: all of them
		insert admin_comm_amount
			(admin_comm, pay_type, pay_to, comm_start_date,
					comm_end_date, commission_percent, simple_profit)
		select ac.admin_comm, ac.pay_type, ac.pay_to,
				ac.start_date, ac.end_date, ac.commission_percent,
				sum(pi.simple_profit)
		from profit_item pi, admin_commission ac
		where pi.end_date between ac.start_date and ac.end_date
		group by ac.admin_comm, ac.pay_type, ac.pay_to, ac.start_date,
				ac.end_date, ac.commission_percent

		-- get name if a salesman
		update admin_comm_amount
		set name = s.name
		from admin_comm_amount aca, salesman s
		where aca.pay_type = 'S'
		and aca.pay_to = s.salesman

		-- get name if an employee
		update admin_comm_amount
		set name = $(employee_name e)
		from admin_comm_amount aca, employee e
		where aca.pay_type = 'E'
		and aca.pay_to = e.emp

		-- calculate commission amount
		update admin_comm_amount
		set amount = $(round "simple_profit * commission_percent / 100" .01 O)
		go

	go
	print "Granting rights on proc calc_admin_commission"
	go

	grant execute on calc_admin_commission to public
	go


	print "Creating proc calc_salary_pay"
	go

	/*
	-- General: Inserts, then modifies records into salary_amount. 

	-- 0. Clear out salary_amount

	-- 1. Insert salary_draw info into salary_amount.

	-- 2. Add total earned pay for the period to salary_amount.

	-- 3. Add the previous bank balance in salary_amount.

	-- 4. Do pay calculations for salaried employees who earned 
	--    *more* than regular weekly pay (i.e. amount_per_period).
	--           (aka: total_pay >= amount_per_period )
	-- 4A. Calc overage amount (period threshold) 
	-- 4B. Calc overcap amount (surplus in the bank)
	-- 4C. Calc actual pay (regular pay + 
	--     weekly overage + amount over cap ).

	-- 5. Do pay calculations for employees earned *less* than 
	--      regular weekly pay (i.e. amount_per_period).
	--           (aka: total_pay < amount_per_period )
	-- 5A. Calc the raw deficit
	-- 5B. Adjust raw deficit if there is not
	--     enough in the bank to cover it and the deficit
	--     is more than the max_debit limit.
	-- (make the deficit amount the max_debit limit).
	-- 5C. Adjust raw deficit if paying it would run 
	--     the bank past the undercap_threshold_amt
	--     (max out to undercap_threshold_amt limit).
	-- 5D. Set the actual pay.

	-- 6. Calc bank adjust in salary_amount 
	--      (earned - paid = amount to bank).

	-- 7. Calc bank_after (new bank balance)

	*/
	$(drop_procedure calc_salary_pay)

	create procedure calc_salary_pay

	@start_date datetime   = null,
	@end_date datetime     = null,
	@check_date datetime   = null

	as

		-- 0. Clear out salary_amount
		delete from salary_amount


		if @check_date is not null
		begin
			select @start_date = period_start,
				   @end_date = period_end
			from payroll
			where check_date = @check_date
		end

		-- 1. Set up the draw limits for salary/draw employees.
		insert salary_amount (
			emp, 
			bank_before, 
			total_pay, 
			amount_per_period, 
			max_debit_amt, 
			max_overage_amt, 
			overcap_threshold_amt, 
			undercap_threshold_amt, 
			overage_amt, 
			overcap_amt, 
			bank_adjust, 
			bank_after, 
			actual_pay)
		select distinct  
			sd.emp, 
			0,                                         -- bank_before
			0,                                         -- total_pay
			sd.amount_per_period,                      -- amount_per_period
			sd.amount_per_period * sd.max_debit,       -- max_debit_amt
			sd.amount_per_period * sd.max_overage,     -- max_overage_amt
			sd.amount_per_period * sd.periods_cap,     -- overcap_threshold_amt
			sd.amount_per_period * sd.periods_cap * -1, -- undercap_threshold_amt
			0, 
			0, 
			0, 
			0, 
			0
		from pay_amount pa, salary_draw sd
		where pa.emp =* sd.emp 
		and @start_date between sd.start_date and sd.end_date

		-- 2. START: Set the total pay for this period. 
		select pa.emp, sum ( pa.total_pay ) "total_pay"
		into #total_pay
		from salary_amount csp, pay_amount pa
		where csp.emp = pa.emp
		group by pa.emp

		update salary_amount
		set total_pay = tp.total_pay
		from #total_pay tp, salary_amount sa
		where tp.emp = sa.emp
		-- 2. END:Set the total pay for this period. 

		-- 3. Set the previous bank balance.
		update salary_amount
		set bank_before = sb.bank_amount
		from salary_amount csp, salary_bank sb, payroll p
		where csp.emp = sb.emp
		and p.payroll_id = sb.payroll_id
		and p.period_end =
			( select max ( p2.period_end )
			  from salary_bank sb2, payroll p2
			  where sb2.emp = sb.emp
			  and p2.payroll_id = sb2.payroll_id
			  and p2.period_end < @start_date )

		----------------------------------------------------------------
		-- 4. BEGIN: Employee earned *more* than regular weekly pay 
		--           (i.e. amount_per_period).
		--           (aka: total_pay >= amount_per_period )

		-- 4A. Calc overage amount (period threshold) 
		update salary_amount
		set overage_amt = total_pay - max_overage_amt  
		where total_pay >= amount_per_period 
		and total_pay - max_overage_amt > 0

		-- 4B. Calc overcap amount (surplus in the bank)
		update salary_amount
		set overcap_amt = total_pay - amount_per_period 
						  - overage_amt + bank_before 
						  - overcap_threshold_amt
		where total_pay >= amount_per_period 
		and total_pay - amount_per_period - overage_amt 
			  + bank_before - overcap_threshold_amt > 0

		-- 4C. Calc actual pay (regular pay + 
		--           weekly overage + amount over cap ).
		update salary_amount
		set actual_pay = amount_per_period 
						  + overage_amt 
						  + overcap_amt
		where total_pay >= amount_per_period 

		-- END: Employee earned more than regular weekly pay 
		--      (i.e. amount_per_period).
		--------------------------------------------------------------

		--------------------------------------------------------------
		-- 5. BEGIN: Employee earned *less* than regular weekly pay 
		--        (i.e. amount_per_period).

		/*
		-- 5A. Calc the raw deficit
		-- 5B. Adjust raw deficit if there is not
		--     enough in the bank to cover it and the deficit
		--     is more than the max_debit limit.
		-- (make the deficit amount the max_debit limit).
		-- 5C. Adjust raw deficit if paying it would run 
		--     the bank past the undercap_threshold_amt
		--     (max out to undercap_threshold_amt limit).
		-- 5D. Set the actual pay.
		*/

		-- 5A. Calc the raw deficit
		update salary_amount
		set overage_amt = amount_per_period - total_pay
		where total_pay < amount_per_period 

		-- 5B. Adjust raw deficit if there is not
		--     enough in the bank to cover it and the deficit
		--     is more than the max_debit limit.
		-- (make the deficit amount the max_debit limit).
		update salary_amount
		set overage_amt = max_debit_amt 
		where total_pay < amount_per_period 
		and  bank_before - overage_amt < 0
		and overage_amt > max_debit_amt

		-- 5C. Adjust raw deficit if paying it would run 
		--     the bank past the undercap_threshold_amt
		--     (max out to undercap_threshold_amt limit).
		update salary_amount
		set overage_amt = bank_before - undercap_threshold_amt
		where total_pay < amount_per_period 
		and bank_before - overage_amt < undercap_threshold_amt

		-- 5D. Set the actual pay.
		update salary_amount
		set actual_pay = total_pay + overage_amt 
		where total_pay < amount_per_period 

		-- END: Employee earned *less* than regular weekly pay 
		--      (i.e. amount_per_period).
		--------------------------------------------------------------

		--------------------------------------------------------------
		-- <<<<< Generic Calculations regardless of earnings.>>>>>
		-- 6. Calc bank adjust (earned - paid = amount to bank).
		update salary_amount
		set bank_adjust = total_pay - actual_pay

		-- 7. Calc bank_after (new bank)
		update salary_amount
		set bank_after = bank_before + bank_adjust
		--------------------------------------------------------------

	go
	print "Granting rights on proc calc_salary_pay"
	go
	grant exec on  calc_salary_pay to public
	go


	print "Creating table insurance_amount"
	go
	$(overwrite_table insurance_amount "
		emp                   internal_id  	NOT NULL,
		fixed_amount          money        	NULL,
		nonbill_hrs_limit     int          	NULL,
		multiplier            numeric(5,2) 	NULL,
		total_hours           numeric(5,2) 	NULL,
		applicable_hours      numeric(8,2) 	NULL,
		insurance_adjustment  money        	NULL,
		barefoot_contribution money        	NULL
	")

 	grant all on insurance_amount to public
	go


	print "Creating proc calc_insurance_contribution"
	go

	$(drop_procedure calc_insurance_contribution)

	create procedure calc_insurance_contribution
 		@start_date datetime = null,
 		@check_date datetime = null
	as

		 declare @sal3_adjustment money

		 select @sal3_adjustment = 25

		 delete insurance_amount

	  	 if @check_date is not null
		 begin
			select @start_date = period_start
			from payroll where check_date = @check_date
		 end

		 -- Retrieve current insurance terms for those covered.
		 insert insurance_amount 
		      ( emp, fixed_amount, nonbill_hrs_limit,
			    multiplier, total_hours, insurance_adjustment )
		 select pa.emp,
			 ir.fixed_amount,
			 ir.nonbill_hrs_limit,
			 ir.multiplier,
			 sum ( pa.hours ) total_hours,
			 0
		 from pay_amount pa, insurance_rate ir
		 where ir.emp = pa.emp
		 and  @start_date between ir.start_date and ir.end_date
		 group by pa.emp,
			 ir.fixed_amount,
			 ir.nonbill_hrs_limit,
			 ir.multiplier

		 -- Use this table to determine #insurance_adjustment.applicable_hours
		 select emp, requires_billing, requires_payment, sum (hours) "hours"
		 into #billable_nonbillable_hrs
		 from  pay_amount
		 group by emp, requires_billing, requires_payment

		 -- This update is to adjust insurance_amount.applicable_hours
		 --  for non-billable, but payable hours.
		 -- (where total non-billable/payable hours <= nonbill_rs_limit)
		 update insurance_amount
		 set applicable_hours = bnh.hours
		 from insurance_amount ia, #billable_nonbillable_hrs bnh
		 where ia.emp = bnh.emp
		 and bnh.requires_payment = 1
		 and bnh.requires_billing = 0
		 and ia.fixed_amount is null
		 and bnh.hours <= ia.nonbill_hrs_limit

		 -- This update is to adjust #insurance_adjustment.applicable_hours
		 --  for non-billable, but payable hours.
		 -- (where total non-billable/payable hours > nonbill_hrs_limit)
		 update insurance_amount
		 set applicable_hours = ia.nonbill_hrs_limit
		 from insurance_amount ia, #billable_nonbillable_hrs bnh
		 where ia.emp = bnh.emp
		 and bnh.requires_payment = 1
		 and bnh.requires_billing = 0
		 and ia.fixed_amount is null
		 and bnh.hours > ia.nonbill_hrs_limit

		 -- This update is to adjust #insurance_adjustment.applicable_hours
		 --  for billable/payable hours.
		 update insurance_amount
		 set applicable_hours = isnull ( applicable_hours, 0 ) + hours
		 from insurance_amount ia, #billable_nonbillable_hrs bnh
		 where ia.emp = bnh.emp
		 and bnh.requires_payment = 1
		 and bnh.requires_billing = 1
		 and ia.fixed_amount is null

		 -- Calculate the Barefoot contribution for fixed contribution
		 update insurance_amount
		 set barefoot_contribution = fixed_amount
		 where fixed_amount is not null

		 -- Calculate the Barefoot contribution for variable contribution
		 update insurance_amount
		 set barefoot_contribution =  convert ( int, applicable_hours/10  ) 
		                              * multiplier
		 where fixed_amount is null

		 -- Calculate what needs to be displayed as the SAL3 Adjustment.
		 update insurance_amount
		 set insurance_adjustment = barefoot_contribution - @sal3_adjustment
		 where fixed_amount is null
		 go

	 grant exec on calc_insurance_contribution to public
	 go

END
