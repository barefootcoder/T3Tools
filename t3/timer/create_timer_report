#! /usr/bin/perl -w

use strict;

# use Barefoot::debug;						# comment out for production

use CGI;
use POSIX;
use FileHandle;
use Time::Local;
use Date::Parse;

use Barefoot::date;
use Barefoot::range;
use Barefoot::format;
use Barefoot::timerdata;

use constant USER_HEADER =>
	'For user  @<<<<<<<<<<<<<<  :              at current rate of work:';
use constant SUB_HEADER1 =>
	'                                worked     will reach  will reach';
use constant SUB_HEADER2 =>
	'Client:                         so far:      by Fri:     by Sun:';
use constant CLIENT_HOURS =>
	'@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   @##.##       @##.##      @##.##';

$ENV{USER} = "misc";
$ENV{PATH} = "$ENV{PATH}:/opt/sybase/bin:/usr/local/sybutils";

# pseudo-constant for the beginning of the week
my $MONDAY = get_monday_time();


my $today = (localtime(time))[6] - 1;	# - 1 assumes running after midnight
my $days_so_far = $today > 0 ? $today : $today + 7;
# today == 0 means Sun, thus 7 days; today == -1 means Sat, thus 6 days


# collect all timer info into a temp file
use constant TMPFILE => "/tmp/timer.report";
unlink(TMPFILE);
open(TMP, ">" . TMPFILE) and close(TMP) or die("can't init tmp file");
chmod(0777, TMPFILE);

foreach my $timerfile ( glob("/usr/local/t3/barefoot/*.timer") )
{
	my ($user) = $timerfile =~ m@/usr/local/t3/barefoot/(.*?)\.timer@;
	# print "generating times for user $user\n";
	if (system('/usr/local/t3/bin/timer -tu' . $user . ' >/dev/null'))
	{
		print STDERR "$0: couldn't generate timer info for $user\n";
	}
}


# parse through timer data and set up data for report
my %timerdata;
my $curuser = "";
my $curtimer = {
	name		=>	"",
	first_time	=>	time(),
	last_time	=>	0,
};
my $cur_udata = {};
#initialize_inout_times($cur_udata);

my $users = timerdata::query_results(
		"select login, timer_name, client from timer");
die("can't get users and timers out of database") unless defined $users;
# build a hash: keys are login names, values are refs to arrays of timer names
my %users;
foreach my $row (@$users)
{
	my ($login, $timer_name, $client) = @$row;
	$users{$login}->{$timer_name} = $client;
}

foreach my $user (keys %users)
{
	initialize_inout_times($user);

	foreach my $timer_name (keys %{$users{$user}})
	{
		my $first_start = time();
		my $last_end = 0;
		my $client = $users{$user}->{$timer_name};

		my $chunks = timerdata::query_results qq(

				select start_time, end_time
				from timer_chunk
				where login = '$user'
				and timer_name = '$timer_name'

		);
		die("can't get timer chunks out of database") unless defined $chunks;

		foreach my $chunk (@$chunks)
		{
			my ($start, $end) = @$chunk;

			# check for currently timing ... 
			if ($start and $end eq "NULL")	# means timer is currently running
			{
				push @{$timerdata{$user}->{warnings}},
						"Timer $timer_name is still running";
			}

			# turn database date strings into Perl datetimes
			$start = str2time($start);
			$end = $end eq "NULL" ? time() : str2time($end);

			$first_start = range::min($start, $first_start);
			$last_end = range::max($end, $last_end);
			check_inout_times($user, $start, $end);

			# print "$user:$timer_name:$start:$end\n";
		}

		# check for warnings and/or errors for this timer
		if ($last_end < $MONDAY)
		{
			push @{$timerdata{$user}->{errors}},
					"Timer $timer_name for client $client" .
						" is left over from last week (or before)";
		}
		elsif ($first_start < $MONDAY)
		{
			# implies last_end >= $MONDAY
			push @{$timerdata{$user}->{warnings}},
					"Timer $timer_name crosses a week boundary";
		}
	}

	my ($totals, $bad_proj) = timerdata::this_week_totals($user);
	die("can't access database")
				unless defined($totals) and defined($bad_proj);
	$timerdata{$user}->{totals_info} = $totals;
	foreach my $row (@$bad_proj)
	{
		my ($client, $hours) = @$row;
		$hours = sprintf("%.2f", $hours);
		push @{$timerdata{$user}->{errors}},
				"Some timers for client $client have invalid projects, "
						. "totalling $hours hours";
	}
}


# now print out results

# empty parameter to CGI keeps it from asking for name/value pairs
my $cgi = new CGI("");
open(PAGE, ">/home/httpd/DocRoot/staffweb/timer_report.html")
		or die("can't open web page");
$\ = "\n";
print PAGE $cgi->center($cgi->em("This page was auto-generated.  "
		. "Do not edit!"));
foreach my $user (sort keys %timerdata)
{
	my $data = $timerdata{$user};
	# print "$user";
	print PAGE $cgi->h1($user);

	foreach my $error (@{$data->{errors}})
	{
		# print "    ERROR: $error";
		print PAGE $cgi->font({color=>'red'}, "ERROR: $error<BR>");
	}

	foreach my $warning (@{$data->{warnings}})
	{
		# print "    WARNING: $warning";
		print PAGE $cgi->font({color=>'orange'}, "WARNING: $warning<BR>");
	}

	foreach my $row (@{$data->{totals_info}})
	{
		my ($client, $client_name, $rate, $total_hours) = @$row;
		my $hours = int($total_hours);
		my $mins = ($total_hours - $hours) * 60;

		# print "      $client: $hours hours, $mins minutes";
		print PAGE "for client $client $client_name at rate \$$rate: "
				. "$hours hours, $mins minutes<BR>";
	}

	foreach my $day (0..6)
	{
		my $in = $data->{in_time}->[$day];
		my $out = $data->{out_time}->[$day];
		next if $out == 0;						# no times for this day

		my ($in_mins, $in_hrs)
				= (localtime($in))[date::PART_MIN..date::PART_HR];
		my $in_time = POSIX::strftime("%I:%M%p", localtime($in));
		my ($out_mins, $out_hrs)
				= (localtime($out))[date::PART_MIN..date::PART_HR];
		my $out_time = POSIX::strftime("%I:%M%p", localtime($out));
		print PAGE "$date::DAY_NAME[$day]: in at $in_time, "
				. "out at $out_time<BR>";
	}
}


#		my ($user) = $dir =~ m@/export/usr/(.*)@;
#		print "\n\n";
#		writeln(USER, $user);
#		print SUB_HEADER1, "\n", SUB_HEADER2, "\n";
#		open(TIMER, "perl /usr/local/timer/timer -tu $user|") or
#				(print STDERR "couldn't run timer -tu for user $user\n"
#				and next);
#		while ( <TIMER> )
#		{
#			last if /^====/;
#			my $client = substr($_, 4, 30);
#			my $hours = substr($_, 43, 6) + 0;
#			my $daily = $hours / $days_so_far;
#			writeln(CLIENT_HOURS, $client, $hours, $daily * 5, $daily * 7);
#		}
#		close(TIMER);


sub get_monday_time
{
	my @monday_timeparts = localtime(date::MondayTime());
	# have to use 6am, which is what timer considers to be the start of the day
	@monday_timeparts[date::PART_SEC..date::PART_HR] = (0,0,6);
	return timelocal(@monday_timeparts);
}

sub get_day
{
	my ($time) = @_;

	my ($day, $hour) = (localtime($time))[date::PART_DOW,date::PART_HR];
	if ($hour < 6)						# before 6am counts as yesterday
	{
		--$day;
		$day = 6 if $day == -1;			# wrapped around; make it Saturday
	}
	return $day;
}

sub initialize_inout_times
{
	my ($user) = @_;

	foreach my $day (0..6)
	{
		$timerdata{$user}->{in_time}->[$day] = time;
		$timerdata{$user}->{out_time}->[$day] = 0;
	}
}

sub check_inout_times
{
	my ($user, $start, $end) = @_;

	return if $start < $MONDAY;				# has to be this week
	my $day = get_day($start);

	$timerdata{$user}->{in_time}->[$day]
			= range::min($start, $timerdata{$user}->{in_time}->[$day]);
	$timerdata{$user}->{out_time}->[$day]
			= range::max($end, $timerdata{$user}->{out_time}->[$day]);
}
