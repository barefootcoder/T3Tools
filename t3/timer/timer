#! /usr/bin/perl

###########################################################################
#
# timer
#
###########################################################################
#
# The star of the T3 suite, timer.
#
# #########################################################################
#
# All the code herein is released under the Artistic License
#		( http://www.perl.com/language/misc/Artistic.html )
# Copyright (c) 1999-2007 Barefoot Software, Copyright (c) 2004-2007 ThinkGeek
# (based on code originally written roughly 1994, (c) Barefoot Software)
#
###########################################################################

use strict;
use warnings;

use CGI;
use File::Copy;
use Getopt::Std;
use Tie::IxHash;
use Data::Dumper;
use File::HomeDir;
use Config::General;
use Time::ParseDate;

use Barefoot;
use Barefoot::range;
use Barefoot::format;
use Barefoot::exception;
use Barefoot::date epoch => '2003-12-29';
use Barefoot::input qw< get_yn input input_text $COLS >;

use Barefoot::T3::base;
use Barefoot::T3::Todo;
use Barefoot::T3::valid qw< get_parameter >;
use Barefoot::T3::Timer qw< calc_date calc_time test_connection >;
use Barefoot::T3::CLI qw< cli_common_opts cli_get_command cli_fatal >;
use Barefoot::T3::db_get qw< one_datum get_emp_id default_client client_rounding proj_requirements get_logs >;


#################################
# CONSTANTS
#################################


use constant WIDESCREEN => ($COLS >= 100);

use constant RC_FILE => "$~{$ENV{'USER'}}/.t3rc";
my $RC = read_rc();

use constant COMMENT_HEADER => <<END;
   (255 chars is a little over 3 lines if your screen is 80
   columns wide--or almost exactly two lines if your screen is
   125 columns wide--and you don't hit RETURN at all (which you shouldn't))
END


#################################
# FORMATS
#################################


use constant Elapsed =>			WIDESCREEN
	? '@<< @<<<<<<<<<<<<<<<<<<<<<<  for @<<,@<<@<<<<<  @<<<<<<<<<<<  at @> hrs @> mins (@>>>>>>>>>) @<<<'
	: '@<< @<<<<<<<<<<<<<<<<<  for @<<,@<<@<<<<< at @> hrs @> mins (@>>>>>>>>>) @<<<';


use constant Totals_Header =>	WIDESCREEN
	? '@<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    total: @##.## hours'
	: '@<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    total: @##.## hours';
use constant Totals =>			WIDESCREEN
	? '    @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<                 total: @##.## hours'
	: '    @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<       total: @##.## hours';


use constant Totals_Weekly =>	'@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<          total: @##.## hours     @<<<<<<<<<<<';
use constant Average_Weekly =>	'AVERAGE WEEKLY TIME:                           @##.## hours';


use constant Log =>
	'
	Employee:  @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         Date:
	Client:    @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         @<<<<<<<<<
	Project:   @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         Hours:
	Phase:     @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         @##.##

	  Client Tracking Code: @<<<<<<<<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	Comments:';
use constant Log_Comments =>
	'      ~~^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<';

BEGIN { debuggit(5 => "passed all use's"); }


#################################
# PSEUDO-GLOBAL VARIABLES
#################################

debuggit(5 => "about to begin execution");

our $parminfo = {};
our $timers = {};
my $commands = {};
tie %$commands, 'Tie::IxHash',
(
	s	=>	"START",
	e	=>	"LIST",
	d	=>	"DONE",
	l	=>	"LOG",
	c	=>	"CANCEL",
	i	=>	"COPYINFO",
	p	=>	"PAUSE",
	r	=>	"RENAME",
	A	=>	"ANNOTATE",
	b	=>	"BREAKDOWN",
	L	=>	"LOGALL",
	t	=>	"TOTAL",
	a	=>	"AVERAGE",
	'@'	=>	"PARSE",
);
our ($cgi, $command, $workgroup);


#################################
# OPTIONS AND ENVIRONMENT VARS
#################################

if (-t STDOUT or @ARGV)
{
	usage() if @ARGV == 0;

	my $opt = {};
	getopts('sedlcpriAbLtafhu:C:P:H:T:@:', $opt) or usage();
	cli_common_opts($parminfo, $opt);
	$parminfo->{'halftime'} = defined $opt->{'h'};
	$parminfo->{'parse_fmt'} = $opt->{'@'};

	$parminfo->{'newtimer'} = $ARGV[1];

	$command = cli_get_command($commands, $opt);
}
else
{
	$cgi = new CGI;
	$workgroup = $cgi->param('workgroup');
	$parminfo->{'user'} = $cgi->param('user');
	$parminfo->{'client'} = $cgi->param('client');
	$parminfo->{'timer'} = $cgi->param('timername');
	$parminfo->{'newtimer'} = $cgi->param('newname');

	$parminfo->{'force'} = 1;					# no input when run as a CGI
	$parminfo->{'parse_fmt'} = 'x';				# always output XML-style

	$command = $commands->{string::left($cgi->param('mode'), 1)};

	# get a header out there so the server won't choke
	print $cgi->header('text/plain');
}

$parminfo->{'backup_rotate'} = rc_param(ALL => 'BackupRotation');
my $nw = rc_param(ALL => 'NextWeekMarker') || '-nw';
my $nw_re = qr/\Q$nw\E$/;


#################################
# CHECK FOR ERRORS
#################################


usage() unless $command;

debuggit(5 => "survived args and error checks");


#################################
# main()
#################################

$| = 1;


# get the basics
our $mod = T3::Module::Timer->new( user => $parminfo->{'user'} );
$timers = $mod->readfile({
	FOREACH		=>	sub
					{
						my ($timers, $timer) = @_;

						# set current timer tag
						if ($timer->{'time'} =~ /-$/)
						{
							debuggit(3 => "readfile: setting current timer to", $timer->{'name'});
							$timers->{T3::CURRENT_TIMER} = $timer->{'name'};
						}
					}
});
$mod->setup_params($ARGV[0], $parminfo, $timers);


if ($command eq 'START')					# start a timer
{
	# integration with TODO module
	if ($parminfo->{'timer'} =~ /^todo:(.*)$/)
	{
		my $todo_name = $1;

		my $todo_mod = T3::Module::Todo->new( user => $parminfo->{'user'} );
		my $todos = $todo_mod->readfile();
		my $todo = $todos->{$todo_name};
		error(2, "can't find todo name $todo_name") unless $todo;

		$parminfo->{'timer'} = $todo_name;
		$parminfo->{'client'} = $todo->{'client'};
		$parminfo->{'project'} = $todo->{'project'};
		$parminfo->{'todo_link'} = $todo_name;
	}

	unless ($parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		get_giventimer("start", $parminfo);
	}

	if (not exists $timers->{$parminfo->{'timer'}})
	{
		if (test_connection())
		{
			debuggit(5 => "given timer doesn't exist, getting new values");
			get_timer_parameter("client", $parminfo);
			get_timer_parameter("project", $parminfo);

			my ($phase_needed, $tracking_needed)
					= proj_requirements($parminfo->{'client'}, $parminfo->{'project'}, calc_date(time));
			get_timer_parameter("phase", $parminfo) if $phase_needed;
			get_timer_parameter("tracking", $parminfo) if $tracking_needed;
		}
		else
		{
			$parminfo->{'client'} = 0;
			$parminfo->{'project'} = 0;
			$parminfo->{'phase'} = 0;
			$parminfo->{'tracking'} = 0;
		}
	}
}

if ($command eq 'PAUSE')					# pause all timers
{
	if (!$timers->{T3::CURRENT_TIMER})
	{
		error(1, "no timer is actively timing");
	}

	if (!$parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		exit unless get_yn("are you sure you want to pause all timers?");
	}
}

if ($command eq 'CANCEL')					# cancel a timer
{
	if (!$parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		get_giventimer("cancel", $parminfo);

		print STDERR "warning! a cancelled timer is gone forever!\n";
		exit unless get_yn("are you sure you want to cancel timer $parminfo->{'timer'}?");
	}
}

if ($command eq 'RENAME')					# new name for a timer
{
	if (!$parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		get_giventimer("new name for", $parminfo);
	}

	if (not $parminfo->{'newtimer'} or not $parminfo->{'force'})
	{
		my $defname = $parminfo->{'newtimer'} || $parminfo->{'timer'};
		$parminfo->{'newtimer'} = input("new name for this timer?", $defname);
	}
}

if ($command eq 'COPYINFO')
{
	if (!$parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		get_giventimer("copy info for", $parminfo);
	}

	if (not $parminfo->{'newtimer'} or not $parminfo->{'force'})
	{
		my $defname = $parminfo->{'newtimer'} || $parminfo->{'timer'} . $nw;
		$parminfo->{'newtimer'} = input("name for the new timer?", $defname);
	}
}

if ($command eq 'ANNOTATE')						# annotate a timer (add comments)
{
	if (!$parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		get_giventimer("annotate", $parminfo);
	}

	my $giventimer = $parminfo->{'timer'};
	if (not exists $timers->{$giventimer})
	{
		error(1, "no such timer as $giventimer");
	}
	my $timer = $timers->{$giventimer};

	my $opts =
	{
		EDITOR				=>	rc_param(LOG => 'editor'),
		MAXLEN				=>	255,
		ALLTRIM				=>	1,
		STRIP_BLANK_LINES	=>	1,
		DEFAULT				=>	$timer->{'comments'},
	};

	my $header = COMMENT_HEADER;
	my $codes = join('/', grep { $_ } $timer->{'client'}, $timer->{'project'}, $timer->{'phase'});
	$header .= "\nAnnotating Timer: $giventimer ($codes)\n";

	my $comments = input_text('comments', $header, $opts);
	debuggit(3 => "got comments", "<<$comments>>");
	if ($timers->{$giventimer}->{'comments'} and not $comments)
	{
		print STDERR "warning! this will remove all comments from this timer\n";
		unless (get_yn("are you sure you want to continue?"))
		{
			print STDERR "comments will be unchanged.\n";
			exit;
		}
	}

	$parminfo->{'comments'} = $comments;
	$timers->{$giventimer}->{'comments'} = $comments;
}

if ($command eq 'BREAKDOWN')					# break down a timer
{
	if (!$parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		get_giventimer("break down", $parminfo);
	}

	my $giventimer = $parminfo->{'timer'};
	if (not exists $timers->{$giventimer})
	{
		error(1, "no such timer as $giventimer");
	}

	my @parts = split(/,/, $timers->{$giventimer}->{'time'});
	foreach my $part (@parts)
	{
		my $mins = calc_time($part);

		if ($part =~ /^([+-]\d+)$/)
		{
			print "adjusted time by $1 minutes ($mins mins)\n";
			next;
		}

		$part =~ m{(?:(\d+)/)?(\d+)-(\d+)?};
		my $tmp = $1 ? $1 : 0;
		my ($min, $hr, $day, $mon, $year) = (localtime $2)[1..5];
		++$mon, $year += 1900;
		print "from $mon/$day/$year $hr:$min ";
		if ($3)
		{
			($min, $hr, $day, $mon, $year) = (localtime $3)[1..5];
			++$mon, $year += 1900;
			print "to $mon/$day/$year $hr:$min";
		}
		else
		{
			print "to current (still timing)";
		}
		print " at half-time" if $tmp == 2;
		#print " at half-time" if $1 == 2;
		print " ($mins mins)\n";
	}

	# no need for anything further
	exit;
}

if ($command eq 'TOTAL')					# total timers by client
{
	debuggit(5 => "about to start TOTAL routine");

	unless (test_connection())
	{
		print STDERR "The data store is not accessible. Action canceled.\n";
		exit;
	}

	# setup variables, needed regardless of type of total required
	my $totals = {};
	my $emp_id = get_emp_id($mod->user);
	my $tracking_to_total = $ARGV[0];									# 1st arg for this is a tracking code (or nothing)
	debuggit(2 => "for TOTAL, tracking is", $tracking_to_total);
	my $min_time = rc_param(TOTAL => 'mintime') || 0;
	my %ignore_timers = map { $_ => 1 } rc_list(TOTAL => 'ignore');

	my $client;
	foreach ($mod->values($timers))
	{
		next if exists $ignore_timers{$_->{name}};
		debuggit(4 => "checking timer", $_->{'name'}, "and found tracking code", $_->{'tracking'},
				"when looking for tracking code", $tracking_to_total);
		next if $tracking_to_total and $_->{'tracking'} ne $tracking_to_total;

		$client = $_->{'client'} || '???';
		my $proj = $_->{'project'} || '???';
		my $phase = $_->{'phase'} || '???';
		my $tracking = $_->{'tracking'} || '???';
		debuggit(3 => "TOTALling timer", $_->{'name'}, "got client/proj/tracking", $client, $proj, $tracking);

		my $hrs = rounded_time($client, $_->{'time'});
		$hrs = $min_time if calc_time($_->{'time'}) > 0 and $hrs < $min_time;
		if ($tracking_to_total)											# just total for this tracking code
		{
			$totals->{$tracking}->{$phase} += $hrs;
			$totals->{$tracking}->{':TOTAL'} += $hrs;
		}
		else															# total by client/proj for "this week"
		{
			$totals->{$client}->{$proj} += $hrs;
			$totals->{$client}->{':TOTAL'} += $hrs;
		}
	}

	my $logs = get_logs($emp_id, $tracking_to_total ? { TRACKING => $tracking_to_total } : { DATE => 'THIS_WEEK' });
	debuggit(2 => "found", scalar(@$logs), "logs in the DB to total");
	foreach (@$logs)
	{
		my $hrs = $_->{'hours'};
		if ($tracking_to_total)
		{
			$totals->{$tracking_to_total}->{$_->{'phase_id'}} += $hrs;
			$totals->{$tracking_to_total}->{':TOTAL'} += $hrs;
		}
		else
		{
			$totals->{$_->{'client_id'}}->{$_->{'proj_id'}} += $hrs;
			$totals->{$_->{'client_id'}}->{':TOTAL'} += $hrs;
		}
	}

	my (%cats, %subcats);
	foreach my $category (keys %$totals)
	{
		my $query = $tracking_to_total
				? 'select name from {@client_tracking} ' . "where client_id = '$client' and tracking_code = '$category'"
				: "select name from {~timer}.client where client_id = '$category'";
		$cats{$category} = eval { one_datum($query) } || '???';
		foreach my $thing (keys %{$totals->{$category}})
		{
			if ($tracking_to_total)
			{
				$query = 'select name from {@phase} ' . "where phase_id = '$thing'";
				$subcats{$category}->{$thing} = eval { one_datum($query) } || '???';
			}
			else
			{
				$query = 'select name from {@project} ' . "where client_id = '$category' and proj_id = '$thing'";
				$subcats{$category}->{$thing} = eval { one_datum($query) } || '???';
			}
		}
	}

	foreach my $category (sort keys %$totals)
	{
		my $total_hrs = delete $totals->{$category}->{':TOTAL'};
		if ($total_hrs)
		{
			print "-" x length(Totals_Header), "\n";
			writeln(Totals_Header, $category, $cats{$category}, $total_hrs);
		}

		foreach my $thing (sort keys %{$totals->{$category}})
		{
			writeln(Totals, $thing, $subcats{$category}->{$thing}, $totals->{$category}->{$thing})
					if $totals->{$category}->{$thing};
		}
	}

	# all done
	exit;
}

if ($command eq 'AVERAGE')
{
	unless (test_connection())
	{
		print STDERR "The data store is not accessible. Action canceled.\n";
		exit;
	}

	my $emp_id = get_emp_id($mod->user);
	debuggit(2 => "average: emp_id is", $emp_id);
	my $client_id = default_client($emp_id);
	debuggit(2 => "average: clietn_id is", $client_id);
	my $logs = get_logs($emp_id, { CLIENT => $client_id });
	debuggit(3 => "average: got", scalar(@$logs), "total logs back");

	my $breakout = rc_param(AVERAGE => 'breakout') || '';

	my (%weeks, %breakout);
	foreach (@$logs)
	{
		my $period = date::period_name(date::period_num($_->{'log_date'}, 7), 7);
		$weeks{$period} += $_->{'hours'};
		debuggit(4 => $_->{'log_date'}, "($period)", $_->{'hours'});

		if ($_->{'proj_id'} eq $breakout)
		{
			$breakout{$period} += $_->{'hours'};
		}
	}

	my $alltime = 0;
	my $last_date = undef;
	foreach (sort keys %weeks)
	{
		my ($start, $end) = split(' - ');
		if ($last_date)
		{
			unless ($start eq date::incDays($last_date, 1))
			{
				debuggit(2 => "last date", $last_date, "start", $start);
				print "!!!!!!!!!!!!!!!   WARNING!  SKIPPED WEEK(S)!   !!!!!!!!!!!!!!!\n";
			}
		}
		$last_date = $end;

		my $breakout_total = $breakout{$_} ? sprintf("$breakout: %5.2f", $breakout{$_}) : '';

		writeln(Totals_Weekly, $_, $weeks{$_}, $breakout_total);
		$alltime += $weeks{$_};
	}

	print "=" x length(Totals_Weekly), "\n";
	writeln(Average_Weekly, range::round($alltime / scalar(keys %weeks), range::ROUND_OFF, .25));

	# all done
	exit;
}

if ($command eq 'LOG')					# log time directly to the DB
{
	unless (test_connection())
	{
		print STDERR "The data store is not accessible. Action canceled.\n";
		exit;
	}

	gather_log_info($parminfo);
}

if ($command eq 'DONE')					# done with a timer
{
	unless (test_connection())
	{
		print STDERR "The data store is not accessible. Action canceled.\n";
		exit;
	}

	if (!$parminfo->{'force'})
	{
		print_elapsed($parminfo, $timers);
		get_giventimer("done with", $parminfo);
	}

	my $giventimer = $parminfo->{'timer'};
	if (!exists $timers->{$giventimer})
	{
		error(1, "no such timer as $giventimer");
	}

	print_and_gather($parminfo, $giventimer);
}

if ($command eq 'LOGALL')
{
	# since LOGALL does so much to the timer file, and does it in such tiny increments, it's a good idea to
	# just save a complete backup of everything before we start
	my $tfile = $mod->base_filename;
	my $backup = "$tfile.preLog";
	unlink $backup if -e $backup;
	copy($tfile, $backup);

	# HACK! this hardcoding, plus the idea that they have to be quarterly, should be changed
	# to allow a more configurable interface
	my %quarterly = ( log => 1, 'timer-fixes' => 1 );

	# HACK! ditto this
	my $log_timername = 'log';

	print_elapsed($parminfo, $timers);
	print <<END;

this will log out all your timers for the week, giving you the opportunity to
save them.  any timers whose names end in '$nw' are assumed to be time for the
upcoming week, and will not be logged out, although they will be renamed to
lose the '$nw' once they can be.  during this time a timer called '$log_timername'
will automatically be started for you.  note: if you want to give up logging
out a timer while you're in the middle of it, you can safely hit CTRL-C.  you
will be given an opportunity to retry the logout, cancel the timer, or just
move on.  pressing CTRL-C when _not_ in the middle of logging out a timer
exits the program as you would expect.  note2: if you have to exit before
you've logged out all timers, you can run timer -L again, and it will mostly
pick up where it left off, except that it will think that all the timers you
told it to save for next week are last week's timers, only empty; don't worry
too much about that, though, since you will still have the opportunity to
resave them if you want to.
END
	if (!$parminfo->{'noconfirm'})
	{
		exit unless get_yn("are you sure you want to continue?");
	}

	unless (test_connection())
	{
		print STDERR "The data store is not accessible. Action canceled.\n";
		exit;
	}

	unless ($timers->{T3::CURRENT_TIMER} and $timers->{T3::CURRENT_TIMER} eq $log_timername)
	{
		# HACK! these are hardcoded for now; should be changed to pull from a config file or something
		local $parminfo->{'timer'} = $log_timername;
		local $parminfo->{'client'} = 'TG';
		local $parminfo->{'project'} = 'LOG';
		local $parminfo->{'phase'} = 'ADM';
		$mod->timer_command('START', $parminfo, $timers);
	}

	my %visited_nw_timers;
	TIMER: foreach my $timer (sort keys %$timers)
	{
		next if $timer =~ /^:/;					# special markers; not real timers
		next if $timer =~ /-save/;				# timers saved from a previous timer -L
		next if exists $quarterly{$timer};		# not time to log these out yet

		if ($timer =~ /$nw_re/)					# timers for next week started early
		{
			debuggit(3 => "now dealing with nw timer", $timer);
			unless (exists $visited_nw_timers{$timer})
			{
				# just rename it to get rid of the -nw
				$parminfo->{'timer'} = $timer;
				$visited_nw_timers{$timer} = true;

				$timer =~ s/$nw_re//;
				$parminfo->{'newtimer'} = $timer;
				$mod->timer_command('RENAME', $parminfo, $timers);
			}
			next;
		}

		# shortcuts
		my $thistimer = $timers->{$timer};
		my $exists_nw = exists $timers->{$timer . $nw};

		my $minutes = calc_time($thistimer->{'time'});
		if ($minutes == 0)
		{
			if ($exists_nw or not get_yn("\n\ntimer $timer has no time logged this week; save it?"))
			{
				$parminfo->{'timer'} = $timer;
				$mod->timer_command('CANCEL', $parminfo, $timers);
			}
			next;
		}

		unless ($exists_nw or exists $timers->{$timer . '-save'})
		{
			$parminfo->{'timer'} = $timer;
			$parminfo->{'newtimer'} = $timer . '-save';
			$mod->timer_command('COPYINFO', $parminfo, $timers);
		}

		# log out the timer (done)
		LOG: {
			eval
			{
				local $SIG{INT} = sub { die("user interrupt") };
				my $info = { %$parminfo };
				$info->{'timer'} = $timer;
				print_and_gather($info, $timer);
				$mod->timer_command('DONE', $info, $timers);
			};

			if (exists $timers->{$timer})			# logging out failed for some reason
			{
				redo LOG if get_yn("\n\nlogging of timer $timer failed; retry?");
				if (get_yn("\ndo you want to cancel this timer?"))
				{
					$parminfo->{'timer'} = $timer;
					$mod->timer_command('CANCEL', $parminfo, $timers);
					last LOG;
				}

				if (exists $timers->{$timer . '-save'})
				{
					$parminfo->{'timer'} = $timer . '-save';
					$mod->timer_command('CANCEL', $parminfo, $timers);
				}

				next TIMER;
			}
		}

		my $saved_timer = $timer . $nw;
		unless (exists $timers->{$saved_timer})
		{
			$saved_timer = $timer . '-save';
			$saved_timer = '' unless exists $timers->{$saved_timer};
		}
		if ($saved_timer)
		{
			if ($saved_timer =~ /$nw_re/ or get_yn("\nsave this timer for next week?"))
			{
				$parminfo->{'timer'} = $saved_timer;
				$parminfo->{'newtimer'} = $timer;
				$mod->timer_command('RENAME', $parminfo, $timers);
				$visited_nw_timers{$saved_timer} = true;		# might get a -save in here, but it doesn't really matter
			}
			else
			{
				$parminfo->{'timer'} = $saved_timer;
				$mod->timer_command('CANCEL', $parminfo, $timers);
			}
		}

		print_elapsed($parminfo, $timers);
	}

	# commands have been performed; just exit now
	exit;
}

if ($command eq 'PARSE')			# special flag for use by other processes
{
	print_parsable($parminfo, $timers);
	exit;
}

try
{
	# the main event
	$mod->timer_command($command, $parminfo, $timers);
}
catch
{
	error(3, $_);
};

if ($command eq 'COPYINFO')
{
	# why copy a timer's info unless you also wanted to start it?
	# info is copied, let's just start it now
	$parminfo->{'timer'} = $parminfo->{'newtimer'};
	$mod->timer_command('START', $parminfo, $timers);
}

unless ( $command eq 'LOG' )
{
	print_elapsed($parminfo, $timers);
}


#################################
# SUBROUTINES
#################################

sub usage
{
	error(0,
		"incorrect usage; usage is:\n",
		"    timer -{s|p|d|c|r|i|e|l|L|b|t|a} [-fh] [-u user] [-C clientcode] [-P projcode] [-H phasecode] " .
						"[-T trackingcode] [timername [newtimername]]\n",
		"       -s:   start a timer\n",
		"       -p:   pause all timers\n",
		"       -d:   done with a timer\n",
		"       -c:   cancel a timer\n",
		"       -r:   rename/change info for a timer\n",
		"       -i:   copy info for a timer (copies all but actual time worked)\n",
		"       -e:   show elapsed time for all timers\n",
		"       -l:   log time directly to database\n",
		"       -A:   annotate the timer by adding comments\n",
		"       -b:   break down a timer's portions\n",
		"       -L:   log out all current timers, optionally saving their info\n",
		"       -t:   total for all timers this week (by client)\n",
		"       -a:   totals by week with weekly average\n",
		"       -f:   force (ignore all confirmations)\n",
		"       -h:   half-time timing (while watching movies, etc)\n",
		"       -u:   user name to use (default is current user)\n",
		"       -C:   client number to use (default is user-specific)\n",
		"       -P:   project code to use (no default)\n",
		"       -H:   phase code to use (no default)\n",
		"       -T:   tracking code to use (no default)\n",
		"    clientcode, projcode, and phasecode must be a valid 3-character code (will be forced to uppercase)\n",
		"    trackingcode is freeform and will not be case adjusted\n",
		"    timername is ignored for -p, -e, -l, and -L\n",
		"    timername is treated as a tracking code to total up (total for all time) for -t\n",
		"    timername for other functions defaults to the running timer, if any\n",
		"    newtimername is ignored for all but -r and -i\n",
	);
}


sub error
{
	my ($exitcode, @messages) = @_;

	if ($cgi)
	{
		foreach (@messages)
		{
			# s/\n/<BR>\n/g;
		}
		print @messages, "\n";
		exit 0;
	}
	else																# must be CLI, so just pass through args
	{
		&cli_fatal;
	}
}


sub read_rc
{
	my %rc;
	%rc = ParseConfig(RC_FILE) if -r RC_FILE;
	return \%rc;
}

sub rc_param
{
	my ($command, $key) = @_;

	return undef unless exists $RC->{$command};
	return undef unless exists $RC->{$command}->{$key};
	return $RC->{$command}->{$key};
}

sub rc_list
{
	my ($command, $key) = @_;

	return () unless exists $RC->{$command};
	return () unless exists $RC->{$command}->{$key};
	if (ref $RC->{$command}->{$key} eq 'ARRAY')
	{
		return @{$RC->{$command}->{$key}};
	}
	else
	{
		return ($RC->{$command}->{$key});
	}
}


sub get_giventimer
{
	my ($function, $parminfo) = @_;

	TIMER: {
		my $new = input("$function what timer? ", $parminfo->{'timer'});
		if ($new =~ /\s/)
		{
			print STDERR "timer name can't have a space; sorry\n";
			redo TIMER;
		}
		elsif ($new =~ /^:/)
		{
			print STDERR "timer name can't start with a colon; sorry\n";
			redo TIMER;
		}

		$parminfo->{'timer'} = $new if $new;
	}
}


sub get_timer_parameter
{
	my ($parmname, $info) = @_;
	debuggit(4 => "get_timer_parameter: wantarray is", wantarray);

	# objinfo would be the specified timer, which we get here
	my $objinfo = $timers->{$info->{'timer'}};

	# this is somewhat complicated.  we need to figure out what the proper thing (client, project, phase, or
	# tracking code) should be, and then use it as the default.  now, we have three possible places to get
	# this info from: the default for this user (from the database; get_parameter knows how to retrieve that),
	# the thing already set (for a pre-existing timer; this comes from objinfo), or the thing specified on the
	# command line (if specified at all; this comes from info, which is usually $parminfo).  for most cases,
	# the priority is: command line, pre-existing, default.  for the start command, however, a pre-existing
	# parameter can't be changed if it exists, so we use it and exit.	also, if -f (force) was specified
	# (that flag is in info), we can quit right there.

	# got it? here we go ...

	my $opts = {};
	# this will keep people from being able to change parameters if the command is "start"
	$opts->{'RESTRICT_CHANGES'} = true if $command eq 'START';

	return get_parameter($parmname, $info, $objinfo, $opts);
}


sub get_timer_hrsmins
{
	my ($timer) = @_;

	my $minutes = calc_time($timer->{'time'});
	my $hours = range::round($minutes / 60, range::ROUND_DOWN);
	$minutes = $minutes - $hours * 60;

	return ($hours, $minutes);
}


sub print_elapsed
{
	my ($parminfo, $timers) = @_;
	print_parsable($parminfo, $timers) and return if $cgi;

	#print Dumper($timers);
	print "\nTIMERS FOR ", $mod->user, ":\n";
	foreach my $tname (sort keys %$timers)
	{
		# ignore tags
		next if substr($tname, 0, 1) eq ':';

		my $timer = $timers->{$tname};

		my ($hours, $minutes) = get_timer_hrsmins($timer);
		my $date = calc_date($timer->{'time'});
		my $curtimer_marker = $timers->{T3::CURRENT_TIMER} &&
				$timers->{T3::CURRENT_TIMER} eq $tname ? "==>" : "";

		writeln(Elapsed, $curtimer_marker, $tname, $timer->{'client'},
				$timer->{'project'}, $timer->{'phase'} ? ",$timer->{'phase'}" : "",
				WIDESCREEN ? ($timer->{'tracking'} ? "[$timer->{'tracking'}]" : '') : (),
				$hours, $minutes, $date,
				$timer->{'time'} =~ m{/\d+-$} ? "HALF-TIMING" : "");
	}

	print $timers->{T3::CURRENT_TIMER}
			? "active timer is $timers->{T3::CURRENT_TIMER}"
			: "no timer is active";
	print "\n\n";
}

sub print_parsable
{
	my ($parminfo, $timers) = @_;

	while (my ($tname, $timer) = each %$timers)
	{
		next if $tname =~ /^:/;					# special markers; not real timers

		print "$tname\n" and next if $parminfo->{'parse_fmt'} eq 't';

		my $client = $timer->{'client'};
		foreach my $part (reverse split(/,/, $timer->{'time'}))
		{
			print "<TIMER>" if $parminfo->{'parse_fmt'} eq 'x';
			print $mod->user, ":$tname:$client:";

			my $mins = calc_time($part);
			print "$mins:";

			if ($part =~ /^([+-]\d+)$/)
			{
				# raw adjustment; date and time not known
				print ":";
				next;
			}

			my ($start, $end) = ($part =~ m{(?:(\d+)/)?(\d+)-(\d+)?});
			print "$start:$end";		# if current, $end will be blank field

			# not sure if half-time is needed, so we'll leave it out for now
			# print " at half-time" if $1 == 2;

			print "</TIMER>" if $parminfo->{'parse_fmt'} eq 'x';
			print "\n";
		}
	}
	return 1;
}


sub rounded_time
{
	my ($client, $time) = @_;
	debuggit(4 => "rounded_time:", $client, $time);

	my $hours = calc_time($time) / 60;

	my ($rounding, $to_nearest);
	if (eval { ($rounding, $to_nearest) = client_rounding($client) })
	{
		$hours = range::round($hours, $rounding, $to_nearest);
		debuggit(4 => "rounding time for client", $client, ":", $rounding, "to", $to_nearest, "result", $hours);
	}
	return $hours;
}


sub print_and_gather
{
	my ($info, $giventimer) = @_;

	my $thistimer = $timers->{$giventimer};
	my ($hours, $minutes) = get_timer_hrsmins($thistimer);
	my $date = calc_date($thistimer->{'time'});
	my $client = $thistimer->{'client'};
	print "\ntimer: $giventimer\n";
	print "total time is $hours hrs $minutes mins on $date for $client\n";
	print "please remember this in case there is a problem!\n\n";
	if (!$info->{'noconfirm'})
	{
		print "press return to continue ...\n";
		<STDIN>;
	}

	gather_log_info($info, $giventimer);
}


sub gather_log_info
{
	my ($info, $log_timer) = @_;

	# For logging timers, we MUST ask for codes; no 'force' allowed.  But
	# the 'noconfirm' option can still turn off the annoying confirmations.
	$info->{'force'} = false;

	# a shortcut
	my $timer = defined $log_timer ? $timers->{$log_timer} : undef;
	debuggit(2 => $log_timer, "timer:", Dumper($timer));

	# please note that the order you ask for the data elements in is
	# *very* important ... the following things are true:
	#	you have to do employee before you do client
	#	you have to do employee before you do project
	#	you have to do date before you do client
	#	you have to do date before you do project
	# 	you have to do client before you do hours
	#	you have to do client before you do project
	#	you have to do client before you do tracking
	#	you have to do project before you do phase
	#	you have to do project before you do tracking
	#	you have to do project before you do comments
	# based on this, there is not a whole lot you can do differently in
	# the order chosen below, so DON'T MUCK WITH IT!

	my ($emp_id, $emp_fullname) = get_timer_parameter("employee", $info);

	# $mod->user may not match emp_id at this point; that's ok.
	# It lets us track the actual person who submitted the command.

	$info->{'date'} = my $date = input(
			"Date:",
			$timer ? calc_date($timer->{'time'}) : date::today(),
			{
				VALID		=>	\&date::isValid,
				VALID_ERR	=>	"  {Invalid date!}\n",
			}
	);


	# Get client info
	my ($client, $client_name) = get_timer_parameter("client", $info);

	my $hours;
	HOURS: {
		my ($rounding, $to_nearest) = client_rounding($client);

		$hours = input("Hours:", $timer ? range::round(calc_time($timer->{'time'}) / 60, $rounding, $to_nearest) : 0);
		print "  {Hours must divisible by $to_nearest}\n" and redo HOURS
				unless $hours == range::round($hours, range::ROUND_OFF, $to_nearest);
		print "  {Hours must be greater than zero}\n" and redo HOURS unless $hours > 0;
	}
	$info->{'hours'} = $hours;

	# Get project info
	my ($project, $project_name) = get_timer_parameter("project", $info);

	my ($phase_needed, $tracking_needed, $comments_needed) = proj_requirements($client, $project, $date);

	# Get phase information
	my ($phase, $phase_name) = $phase_needed ? get_timer_parameter("phase", $info) : (undef, "");
	$info->{'phase'} = $phase;

	my ($tracking, $tracking_name) = $tracking_needed ?  get_timer_parameter("tracking", $info) : (undef, "");
	$info->{tracking} = $tracking;

	# Get comments if necessary
	$info->{'comments'} = $comments_needed ? get_comment($log_timer, $info) : undef;

	print "working.....\n";

	# show everything and double check:
	writeln(Log,
			$emp_id,	$emp_fullname,
			$client,	$client_name,				$date,
			$project,	$project_name,
			$phase,		$phase_name,				$hours,
							$tracking, $tracking_name
	);
	writeln(Log_Comments, $info->{'comments'});

	unless (get_yn("\n\nis everything okay?"))
	{
		die("\n  {Try to log this timer out again later.}\n");
	}

	debuggit(4 => "parms after gather_log_info:", Dumper($info));
}


sub get_comment
{
	my ($timername, $parminfo) = @_;

	my $header = COMMENT_HEADER;
	if ($timername)
	{
		my $timer = $timers->{$timername};
		my ($hours, $minutes) = get_timer_hrsmins($timer);
		my $date = calc_date($timer->{'time'});
		my $codes = join('/', grep { $_ } $parminfo->{'client'}, $parminfo->{'project'}, $parminfo->{'phase'});
		$header .= "\nTimer: $timername ($hours hrs $minutes mins) on $date for $codes\n";
	}

	my $opts =
	{
		EDITOR				=>	rc_param(LOG => 'editor'),
		MAXLEN				=>	255,
		REQUIRED			=>	1,
		ALLTRIM				=>	1,
		STRIP_BLANK_LINES	=>	1,
		DEFAULT				=>	$timername ? $timers->{$timername}->{'comments'} : '',
	};

	my $comments = input_text('comments', $header, $opts);

	debuggit(4 => "comments are:", $comments);

	return $comments;
}
