#! /usr/bin/perl

# For RCS:
# $Date$
# $Log$
# Revision 1.14  2000/02/13 21:54:58  buddy
# fixed bug in SQL code for checking time logged to db in -t function
#
# Revision 1.13  2000/02/05 06:49:06  buddy
# implemented "use constant" constants
# removed abortive effort to create -l option
# made the choice of a "default" timer a little more intelligent
# updated rounding rules to match new timer db
# now uses time_log instead of log (new table in timer db)
# moved round() function into Barefoot::range module
# fixed obscure bug with -r trying to log default timer
# now splits timer file lines on explicit tab rather than any whitespace
# implemented "?" help function for employees when logging time
# logging time now understands new client_employee table format
# now uses client_project instead of cliproj (new table in timer db)
# made client project message consistent with others
# generally cleaned up code and comments
#
# Revision 1.12  2000/01/03 04:44:00  buddy
# changed so that any ending time between midnight and 6am counts on the prev day
# fixed -r function
#
# Revision 1.11  1999/12/03 22:41:05  buddy
# added grand totals to -t option
#
# Revision 1.10  1999/10/07 18:59:34  buddy
# fixed bug with redo CLIENT when prompting for client number
#
# Revision 1.9  1999/09/05 05:12:38  buddy
# added check against client_employee table to verify client for log entry
#
# Revision 1.8  1999/07/13 19:44:05  mike
# Fixed "no timer active" bug
#
# Revision 1.7  1999/07/09 19:01:27  mike
# Fixed active timer bug and added "working..." for when comments are being entered
#
# Revision 1.6  1999/05/04 17:26:41  buddy
# changed call to timerdata::insert_log() to display error returned from Sybase
#
# Revision 1.5  1999/05/04 04:25:24  buddy
# changed timerdata::insert_log() call to check for failure
#
# Revision 1.4  1999/05/04 01:27:23  buddy
# added time logging directly to Sybase
# changed -d and -r options
# polished up history saving
# added input() function
#
# Revision 1.3  1999/04/23 03:59:57  buddy
# added total function
# fixed bug with "done" not transmitting proper date to FoxPro
#
# Revision 1.2  1999/04/19 20:18:53  buddy
# added tracking of client number
# changed "newtimer" var to "giventimer"
#
# Revision 1.1  1999/02/23 22:50:00  buddy
# Initial revision
#
# $Id$
# $Revision$

use strict;

use Env qw(TIMERDIR HOME USER);
use Getopt::Std;

use Barefoot::date;
use Barefoot::range;
use Barefoot::timerdata;


#################################
# CONSTANTS
#################################

use constant TIMEFILE => 'timer.$$$';
use constant HISTFILE => 'timer.history';

use constant SAMBAGRP => 'guestpc';

use constant FALLBACK_TIMER => 'default';


#################################
# FORMATS
#################################

use constant Elapsed =>
	'@<< @<<<<<<<<<<<<<<<<<  for @<<  at  @> hrs @> mins  (@>>>>>>>>>)   @<<<<<<<<<<';
use constant Totals =>
	'@<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  total: @##.## hours';

use constant Log =>
	'
    Employee:  @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         Date:
    Client:    @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         @<<<<<<<<<
    Project:   @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         Hours:
    Phase:     @<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<         @##.##

          Client Project ID: @<<<<<<<<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    Comments:';
use constant Log_Comments =>
	'      ~~^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<';


#################################';
# OPTIONS AND ENVIRONMENT VARS
#################################

if (@ARGV == 0)
{
	error(0,
		"incorrect usage; usage is:\n",
		"    timer -{s|p|d|c|e|r|b|t} [-fh] [-u user] [-C clientnum] ",
						"[timername] [newtimername]\n",
		"       -s:   start a timer\n",
		"       -p:   pause all timers\n",
		"       -d:   done with a timer\n",
		"       -c:   cancel a timer\n",
		"       -n:   new name/client for a timer\n",
		"       -e:   show elapsed time for all timers\n",
		"       -r:   run the time logger directly\n",
		"       -b:   break down a timer's portions\n",
		"       -t:   total for all timers this week (by client)\n",
		"       -f:   force (ignore all confirmations)\n",
		"       -h:   half-time timing (while watching movies, etc)\n",
		"       -u:   user name to use (default is current user)\n",
		"       -C:   client number to use (default is user-specific)\n",
		"    user must have an I:\\ drive directory\n",
		"    clientnum must be a valid 3-digit timer code\n",
		"    timername is ignored for -p\n",
		"    newtimername is ignored for all but -n\n",
	);
}

my $timerinfo = {};

my $opt = {};
getopts('sedrcpnbtfhu:C:$', $opt);
$timerinfo->{force} = defined($opt->{f});
$timerinfo->{halftime} = defined($opt->{h});
$timerinfo->{user} = $opt->{u};
$timerinfo->{client} = $opt->{C};

$timerinfo->{tdir} = defined($::TIMERDIR) ? $::TIMERDIR : $::HOME;
if (!$timerinfo->{user})
{
	$timerinfo->{user} = $::USER;
}
elsif ($timerinfo->{user} ne $::USER)
{
	$timerinfo->{tdir} =~ s/$::USER/$timerinfo->{user}/;
}
$timerinfo->{tfile} = "$timerinfo->{tdir}/" . TIMEFILE;
$timerinfo->{hfile} = "$timerinfo->{tdir}/" . HISTFILE;
$timerinfo->{hfile} =~ s/$timerinfo->{user}/misc/;
$timerinfo->{giventimer} = $ARGV[0] ? $ARGV[0] : FALLBACK_TIMER;
$timerinfo->{newname} = $ARGV[1];
$timerinfo->{timers} = {};
my $func = "";
my $fopt;
foreach $fopt ( ('s','e','d','r','c','p','n','b','t','$') )
{
	$func .= $fopt if $opt->{$fopt};
}


#################################
# CHECK FOR ERRORS
#################################

if (!$timerinfo->{tdir})
{
	error(2, "don't have a directory for timer files\n");
}

if (! -d $timerinfo->{tdir} or ! -w $timerinfo->{tdir})
{
	error(2, "no writeable directory $timerinfo->{tdir} for user " .
			"$timerinfo->{user}\n");
}

if (!$timerinfo->{user})
{
	error(2, "can't figure out which user to timer for\n");
}

if (length($func) != 1)
{
	error(2, "you must specify exactly one function (s,e,d,r,c,p,n,b)\n");
}

if ($timerinfo->{halftime} and $func != 's')
{
	error(2, "half-time flag only makes sense when starting a timer\n");
}



#################################
# main()
#################################

readfile($timerinfo);

# try to find a more reasonable default timer
if ($timerinfo->{giventimer} eq FALLBACK_TIMER)
{
	if (exists $timerinfo->{curtimer})
	{
		# if there's a current timer, use that
		$timerinfo->{giventimer} = $timerinfo->{curtimer};
	}
	elsif (keys(%{$timerinfo->{timers}}) == 1)
	{
		# if there's only 1 timer, use that
		$timerinfo->{giventimer} = (keys(%{$timerinfo->{timers}}))[0];
	}
	# if none of those work, you're stuck with FALLBACK_TIMER
}

if ($func eq 'e')					# show elapsed time
{
	if ($timerinfo->{curtimer} eq 0)
	{
		error(1, "not timing for user $timerinfo->{user}\n");
	}
	print_elapsed($timerinfo);
}

if ($func eq 's')					# start a timer
{
	if (!$timerinfo->{force})
	{
		print_elapsed($timerinfo);
		get_giventimer("start", $timerinfo);
	}

	if ($timerinfo->{giventimer} eq $timerinfo->{curtimer})
	{
		error(1, "already timing for $timerinfo->{curtimer}\n");
	}

	$timerinfo->{timers}->{$timerinfo->{curtimer}}->{time} .= time . ','
			if $timerinfo->{curtimer};
	$timerinfo->{timers}->{$timerinfo->{giventimer}}->{time} .=
			($timerinfo->{halftime} ? "2/" : "") . time . '-';
	$timerinfo->{timers}->{$timerinfo->{giventimer}}->{client}
			= get_client($func, $timerinfo);
	$timerinfo->{curtimer} = $timerinfo->{giventimer};

	print_elapsed($timerinfo);
	writefile($timerinfo);
}

if ($func eq 'p')					# pause all timers
{
	if (!$timerinfo->{curtimer})
	{
		error(1, "no timer is actively timing\n");
	}

	if (!$timerinfo->{force})
	{
		print_elapsed($timerinfo);
		print STDERR "are you sure you want to pause all timers?  (y/N) ";
		exit unless <STDIN> =~ /^y/i;
	}

	$timerinfo->{timers}->{$timerinfo->{curtimer}}->{time} .= time . ',';
	delete $timerinfo->{curtimer};

	print_elapsed($timerinfo);
	writefile($timerinfo);
}

if ($func eq 'c')					# cancel a timer
{
	if (!$timerinfo->{force})
	{
		print_elapsed($timerinfo);
		get_giventimer("cancel", $timerinfo);

		print STDERR "warning! a cancelled timer is gone forever!\n";
		print STDERR "are you sure you want to cancel timer ",
				$timerinfo->{giventimer}, "?  (y/N) ";
		exit unless <STDIN> =~ /^y/i;
	}

	if (!exists $timerinfo->{timers}->{$timerinfo->{giventimer}})
	{
		error(1, "can't cancel; no such timer\n");
	}

	save_history($timerinfo, "cancel");
	delete $timerinfo->{timers}->{$timerinfo->{giventimer}};
	delete $timerinfo->{curtimer}
			if $timerinfo->{curtimer} eq $timerinfo->{giventimer};

	print_elapsed($timerinfo);
	writefile($timerinfo);
}

if ($func eq 'n')					# new name for a timer
{
	if (!$timerinfo->{force})
	{
		print_elapsed($timerinfo);
		get_giventimer("new name for", $timerinfo);
	}

	# just a shortcut here
	my $oldname = $timerinfo->{giventimer};

	if (!exists $timerinfo->{timers}->{$oldname})
	{
		error(1, "can't rename; no such timer\n");
	}

	my $newname;
	if ($timerinfo->{newname} and $timerinfo->{force})
	{
		$newname = $timerinfo->{newname};
	}
	else
	{
		my $defname = $timerinfo->{newname} ? $timerinfo->{newname} : $oldname;
		print STDERR "new name for this timer? ($defname)  ";
		$newname = <STDIN>;
		chomp $newname;
		$newname = $defname if not $newname;
	}

	# if we're renaming ...
	if ($newname ne $oldname)
	{
		if (exists $timerinfo->{timers}->{$newname})
		{
			error(1, "that timer already exists\n");
		}

		$timerinfo->{timers}->{$newname} = $timerinfo->{timers}->{$oldname};
		delete $timerinfo->{timers}->{$oldname};
		# got to do this so get_client() (below) will work
		$timerinfo->{giventimer} = $newname;
	}

	# but of course we might just be changing the client
	$timerinfo->{timers}->{$newname}->{client} = get_client($func, $timerinfo);

	$timerinfo->{curtimer} = $newname if $timerinfo->{curtimer} eq $oldname;
	print_elapsed($timerinfo);
	writefile($timerinfo);
}

if ($func eq 'b')					# break down a timer
{
	if (!$timerinfo->{force})
	{
		print_elapsed($timerinfo);
		get_giventimer("break down", $timerinfo);
	}

	my @parts = split(/,/,
			$timerinfo->{timers}->{$timerinfo->{giventimer}}->{time});
	foreach my $part (@parts)
	{
		my $mins = calc_time($part);

		if ($part =~ /^([+-]\d+)$/)
		{
			print "adjusted time by $1 minutes ($mins mins)\n";
			next;
		}

		$part =~ m{(?:(\d+)/)?(\d+)-(\d+)?};
		my ($min, $hr, $day, $mon, $year) = (localtime $2)[1..5];
		++$mon, $year += 1900;
		print "from $hr:$min $mon/$day/$year ";
		if ($3)
		{
			($min, $hr, $day, $mon, $year) = (localtime $3)[1..5];
			++$mon, $year += 1900;
			print "to $hr:$min $mon/$day/$year";
		}
		else
		{
			print "to current (still timing)";
		}
		print " at half-time" if $1 == 2;
		print " ($mins mins)\n";
	}
}

if ($func eq 't')					# total timers by client
{
	# for this function, we'll need a client hash
	# it will look like this:
	#	%clients							main hash
	#	$clients{001}						client info for client 001
	#	$clients{001}->{rounding}			rounding method for this client
	#	$clients{001}->{to_nearest}			what to round to for this client
	#	$clients{001}->{total}				total time for this client
	my %clients;

	# first total up existing unlogged timers
	foreach my $timer (values %{$timerinfo->{timers}})
	{
		# just a shortcut here
		my $client = $timer->{client};

		if (not exists $clients{$client})
		{
			$clients{$client} = {};
			($clients{$client}->{rounding}, $clients{$client}->{to_nearest})
					= timerdata::client_rounding($client);
			$clients{$client}->{total} = 0;
		}
		my $time = calc_time($timer->{time});	# get total minutes
		$time /= 60;							# convert to hours
												# now round appropriately
		$time = range::round($time, $clients{$client}->{rounding},
				$clients{$client}->{to_nearest});
		$clients{$client}->{total} += $time;	# and tot it up
	}

	# now get log entries from the timer database
	my $monday = date::MondayDate();
	my $query = "
		select tl.client, sum(tl.hours)
		from time_log tl, employee e
		where tl.emp = e.emp
		and e.login = '$timerinfo->{user}'
		and tl.date between '$monday' and dateadd(day, 6, '$monday')
		group by tl.client
	";
	my $results = timerdata::query_results($query);
	foreach my $row (@$results)
	{
		my ($client, $hours) = @$row;
		$clients{$client}->{total} += $hours;
	}

	my $grand_total = 0;
	foreach my $client (keys %clients)
	{
		writeln(Totals, $client, timerdata::client_name($client),
				$clients{$client}->{total});
		$grand_total += $clients{$client}->{total};
	}

	# print total totals
	print "=" x length(Totals), "\n";
	writeln(Totals, "", "Grand Total", $grand_total);
}

if ($func eq 'r')					# run the logger portion
{
	log_to_sybase($timerinfo);
}

if ($func eq 'd')					# done with a timer
{
	if (!$timerinfo->{force})
	{
		print_elapsed($timerinfo);
		get_giventimer("done with", $timerinfo);
	}

	if (!exists $timerinfo->{timers}->{$timerinfo->{giventimer}})
	{
		error(1, "no such timer as $timerinfo->{giventimer}\n");
	}

	my $thistimer = $timerinfo->{timers}->{$timerinfo->{giventimer}};
	my $minutes = calc_time($thistimer->{time});
	my $hours = range::round($minutes / 60, range::ROUND_DOWN),
	my $date = calc_date($thistimer->{time});
	my $client = $thistimer->{client};
	print "\ntotal time is $minutes mins ($hours hrs ", $minutes - $hours * 60,
		" mins) on $date for $client\n";
	print "please remember this in case there is a problem!\n\n";
	if (!$timerinfo->{force})
	{
		print "press return to continue ...\n";
		<STDIN>;
	}

	log_to_sybase($timerinfo, $timerinfo->{giventimer});

	save_history($timerinfo, "done");
	delete $timerinfo->{timers}->{$timerinfo->{giventimer}};
	if ($timerinfo->{curtimer} eq $timerinfo->{giventimer})
	{
		undef($timerinfo->{curtimer});
	}
	print_elapsed($timerinfo);
	
	writefile($timerinfo);
}

if ($func eq '$')					# special flag for use by other processes
{
	my $user = $timerinfo->{user};
	foreach my $timer (keys %{$timerinfo->{timers}})
	{
		my $client = $timerinfo->{timers}->{$timer}->{client};
		foreach my $part (reverse split(/,/,
				$timerinfo->{timers}->{$timer}->{time}))
		{
			print "$user:$timer:$client:";

			my $mins = calc_time($part);
			print "$mins:";

			if ($part =~ /^([+-]\d+)$/)
			{
				# raw adjustment; date and time not known
				print ":";
				next;
			}

			$part =~ m{(?:(\d+)/)?(\d+)-(\d+)?};
			print "$2:$3";				# if current, $3 will be blank field

			# not sure if half-time is needed, so we'll leave it out for now
			# print " at half-time" if $1 == 2;

			print "\n";
		}
	}
}


#################################
# SUBROUTINES
#################################

sub error
{
	my ($exitcode, @messages) = @_;
	my $progname = $0;
	$progname =~ s@.*/@@;
	print STDERR "$progname: ", @messages;
	exit $exitcode;
}

sub readfile
{
	my ($timerinfo) = @_;

	open(TFILE, $timerinfo->{tfile}) or return 0;
	while ( <TFILE> )
	{
		chomp;
		my ($key, $time, $client) = split(/\t/);
		my $curtimer = {};
		$curtimer->{time} = $time;
		$curtimer->{client} = $client;
		$timerinfo->{timers}->{$key} = $curtimer;
		$timerinfo->{curtimer} = $key if ($time =~ /-$/);
	}
	close(TFILE);
}

sub writefile
{
	my ($timerinfo) = @_;

	open(TFILE, ">$timerinfo->{tfile}") or die "can't open timer file";
	my $timer;
	foreach $timer (keys %{$timerinfo->{timers}})
	{
		my $timerstuff = $timerinfo->{timers}->{$timer};
		print TFILE $timer, "\t", $timerstuff->{time}, "\t",
				$timerstuff->{client}, "\n";
	}
	close(TFILE);

	# if these don't work, no big deal, but if running under Linux, they
	# should reset the file to be accessible from 4DOS/Win95
	eval { chown -1, scalar(getgrnam(SAMBAGRP)), $timerinfo->{tfile} };
	eval { chmod 0660, $timerinfo->{tfile} };
}

sub save_history
{
	my ($timerinfo, $func) = @_;
	my $timerstuff = $timerinfo->{timers}->{$timerinfo->{giventimer}};

	open(HIST, ">>$timerinfo->{hfile}") or die("couldn't open history file");
	local ($,) = "\t";				# put tabs between elements
	print HIST $timerinfo->{user}, $::USER, $func, $timerinfo->{giventimer},
			$timerstuff->{time}, $timerstuff->{client}, "\n";
	close(HIST);
}

sub get_giventimer
{
	my ($function, $timerinfo) = @_;

	TIMER: {
		print "$function what timer? ($timerinfo->{giventimer})  ";
		my $new = <STDIN>;
		chomp $new;
		if ($new =~ /\s/)
		{
			print STDERR "timer name can't have a space; sorry\n";
			redo TIMER;
		}
		$timerinfo->{giventimer} = $new if $new;
	}
}

sub get_client
{
	my ($func, $timerinfo) = @_;
	# a little shortcut here
	my $giventimer = $timerinfo->{timers}->{$timerinfo->{giventimer}};

	# this is somewhat complicated ...  we need to figure out what the
	# proper client should be, and then use it as the default ... now,
	# we have three possible places to get the potential client from:
	# the default client for this user (out of Sybase), the client
	# already set for a pre-existing timer, or the client specified on
	# the command line (if given) ... for starting a timer, the priority
	# is: pre-existing, command line, default ... for renaming a timer,
	# the priority is command line, pre-existing, default ... now! if -f
	# (force) was specified, we can quit right here ... also, if we're
	# _start_ing a pre-existing timer, the user isn't allowed to change
	# the client, so we quit in that case too ...

	# got it? here we go ...
	my $defclient;
	if ($func ne 'n')							# anything but new name
	{											# (probably start)
		if (exists $giventimer->{client})		# pre-existing client first
		{
			$defclient = $giventimer->{client};
		}
		elsif ($timerinfo->{client})			# then -C option
		{
			$defclient = $timerinfo->{client};
		}
		else									# defclient from Sybase
		{
			$defclient = timerdata::default_client($timerinfo->{user});
		}
	}
	else										# must be new name
	{
		if ($timerinfo->{client})				# -C option first
		{
			$defclient = $timerinfo->{client};
		}
		elsif (exists $giventimer->{client})	# then pre-existing client
		{
			$defclient = $giventimer->{client};
		}
		else									# defclient from Sybase
		{
			$defclient = timerdata::default_client($timerinfo->{user});
		}
	}
	return $defclient if $timerinfo->{force}
			or ($func eq 's' and exists $giventimer->{client});

	my $client;
	# make a block so redo will work
	CLIENT: {
		print "which client is this for? ($defclient)  ";
		$client = <STDIN>;
		chomp $client;
		$client = $defclient if not $client;	# use default if not specified
		my $fullname = timerdata::client_name($client);
		if (defined($fullname))
		{
			print "illegal client number!\n" and redo CLIENT if not $fullname;
			print "client is $client: $fullname; is this right? (y/N)  ";
		}
		else
		{
			print "can't verify client number! are you sure you want to ",
					"proceed? (y/N)  ";
		}
		redo CLIENT unless <STDIN> =~ /^y/i;
	}
	return $client;
}

sub print_elapsed
{
	my ($timerinfo) = @_;

	print "\nTIMERS FOR $timerinfo->{user}:\n";
	my $timer;
	foreach $timer (keys %{$timerinfo->{timers}})
	{
		my $minutes = calc_time($timerinfo->{timers}->{$timer}->{time});
		my $hours = range::round($minutes / 60, range::ROUND_DOWN);
		$minutes = $minutes - $hours * 60;
		my $date = calc_date($timerinfo->{timers}->{$timer}->{time});

		writeln(Elapsed, $timerinfo->{curtimer} eq $timer ? "==>" : "",
				$timer, $timerinfo->{timers}->{$timer}->{client},
				$hours, $minutes, $date,
				$timerinfo->{timers}->{$timer}->{time} =~ m{/\d+-$}
					? "HALF-TIMING" : "");
	}

	print $timerinfo->{curtimer} ? "active timer is $timerinfo->{curtimer}"
		: "no timer is active";
	print "\n\n";
}

sub calc_time
{
	my ($line) = @_;
	my @times = split(/,/, $line);
	my $total_time = 0;

	my $current_time = 0;
	foreach my $time (@times)
	{
		if ($time =~ /^([+-]\d+)$/)
		{
			$total_time += $1 * 60;
			next;
		}

		my ($divisor, $from, $to) = $time =~ m{(?:(\d+)/)?(\d+)-(\d+)?};
		die "illegal format in time file" unless $from;
		if (!$to)
		{
			die "more than one current time in time file" if $current_time;
			$current_time = 1;
			$to = time;
		}
		$total_time += ($to - $from) / ($divisor ? $divisor : 1);
	}
	return range::round($total_time / 60, range::ROUND_UP);
}

sub calc_date
{
	my ($line) = @_;

	my $seconds;
	if ($line =~ /(\d+),$/)		# ends in a comma, must be paused
	{
		$seconds = $1;
	}
	else						# must be current
	{
		$seconds = time;
	}

	# adjust for working after midnight ... if the time is before 6am,
	# we'll just subtract a day
	my ($hour) = (localtime $seconds)[2];
	$seconds -= 24*60*60 if $hour < 6;

	my ($day, $mon, $year) = (localtime $seconds)[3..5];
	return ++$mon . "/" . $day . "/" . ($year + 1900);
}

sub log_to_sybase
{
	my ($timerinfo, $log_timer) = @_;
	# a shortcut
	my $timer = $timerinfo->{timers}->{$log_timer};

	my ($emp, $client, $rounding, $to_nearest, $date, $hours, $proj, $phase,
			$cliproj, $comments);
	
	# please note that the order you ask for the data elements in is
	# *very* important ... the following things are true:
	#	you have to do employee before you do client
	#	you have to do employee before you do project
	#	you have to do date before you do client
	#	you have to do date before you do project
	# 	you have to do client before you do hours
	#	you have to do client before you do project
	#	you have to do client before you do cliproj
	#	you have to do project before you do phase
	#	you have to do project before you do cliproj
	#	you have to do project before you do comments
	# based on this, there is not a whole lot you can do differently in
	# the order chosen below, so DON'T MUCK WITH IT!

	# a bunch of anonymous blocks for purposes of redo
	# (well, they're called "anonymous" even tho they're named ... go figure)
	EMP: {
		my $valid_employees = timerdata::query_results("
				select e.emp, e.fname, e.lname
				from employee e
				order by e.emp
			");
		$emp = input("Employee number or ? for list:",
				timerdata::emp_number($timerinfo->{user}));
		if ($emp eq "?")
		{
			foreach my $row (@$valid_employees)
			{
				print "  {", $row->[0], " - ",
						$row->[1], " ", $row->[2], "}\n";
			}
			redo EMP;
		}
		my $fullname = timerdata::emp_fullname($emp);
		print "  {Invalid employee!}\n" and redo EMP unless $fullname;
		print "  {Employee is $fullname}\n";
	}

	DATE: {
		$date = input("Date:", calc_date($timer->{time}));
		print "  {Invalid date!}\n" and redo DATE unless date::isValid($date);
	}

	CLIENT: {
		my $valid_clients = timerdata::query_results("
				select c.client, c.name
				from client c
				where exists
				(
					select 1
					from client_employee ce
					where ce.emp = '$emp'
					and ce.client = c.client
					and '$date' between ce.start_date and ce.end_date
				)
			");
		$client = input("Client number or ? for list:", $timer->{client});
		if ($client eq "?")
		{
			foreach my $row (@$valid_clients)
			{
				print "  {", $row->[0], " - ", $row->[1], "}\n";
			}
			redo CLIENT;
		}
		# check for valid client
		foreach my $row (@$valid_clients)
		{
			if ($client eq $row->[0])
			{
				print "  {Client is ", $row->[1], "}\n";
				($rounding, $to_nearest) = timerdata::client_rounding($client);
				last CLIENT;
			}
		}
		print "  {Invalid client!}\n";
		redo CLIENT;
	}

	HOURS: {
		$hours = input("Hours:",
				range::round(calc_time($timer->{time}) / 60,
						$rounding, $to_nearest));
		print "  {Hours must divisible by $to_nearest}\n" and redo HOURS
				unless $hours == range::round($hours,
					range::ROUND_OFF, $to_nearest);
		print "  {Hours must be greater than zero}\n" and redo HOURS
				unless $hours > 0;
	}

	PROJECT: {
		my $valid_projs = timerdata::query_results("
				select proj, name
				from project p
				where client = '$client'
				and '$date' between start_date and end_date
				and exists
				(
					select 1
					from client_employee ce
					where ce.emp = '$emp'
					and ce.client = p.client
					and isnull(ce.proj, p.proj) = p.proj
					and '$date' between ce.start_date and ce.end_date
				)
			");
		$proj = input("Project or ? for list:");
		if ($proj eq "?")
		{
			foreach my $row (@$valid_projs)
			{
				print "  {", $row->[0], " - ", $row->[1], "}\n";
			}
			redo PROJECT;
		}
		# uppercase it for 'em
		$proj = string::upper($proj);
		# check for valid project
		foreach my $row (@$valid_projs)
		{
			print "  {Project is ", $row->[1], "}\n" and last PROJECT
					if $proj eq $row->[0];
		}
		print "  {Invalid project!}\n";
		redo PROJECT;
	}

	my ($phase_needed, $cliproj_needed, $comments_needed)
			= timerdata::proj_requirements($client, $proj);

	PHASE: {
		last PHASE unless $phase_needed;
		my $valid_phases = timerdata::query_results("
				select phase, name
				from phase
			");
		$phase = input("Phase or ? for list:");
		if ($phase eq "?")
		{
			foreach my $row (@$valid_phases)
			{
				print "  {", $row->[0], " - ", $row->[1], "}\n";
			}
			redo PHASE;
		}
		# uppercase it for 'em
		$phase = string::upper($phase);
		# check for valid phase
		foreach my $row (@$valid_phases)
		{
			print "  {Phase is ", $row->[1], "}\n" and last PHASE
					if $phase eq $row->[0];
		}
		print "  {Invalid phase!}\n";
		redo PHASE;
	}

	CLIPROJ: {
		last CLIPROJ unless $cliproj_needed;
		my $valid_cliprojs = timerdata::query_results("
				select project_id, name
				from client_project
				where client = '$client'
			");
		$cliproj = input("Client Project ID or ? for list:");
		if ($cliproj eq "?")
		{
			foreach my $row (@$valid_cliprojs)
			{
				print "  {", $row->[0], " - ", $row->[1], "}\n";
			}
			redo CLIPROJ;
		}
		# uppercase it for 'em
		$cliproj = string::upper($cliproj);
		# check for valid project
		foreach my $row (@$valid_cliprojs)
		{
			print "  {Client project is ", $row->[1], "}\n" and last CLIPROJ
					if $cliproj eq $row->[0];
		}
		print "  {Invalid client project ID!}\n";
		redo CLIPROJ;
	}

	COMMENTS: {
		last unless $comments_needed;
		print "\nEnter comments below (maximum 255 chars):\n";
		print "  (255 chars is a little over 3 lines if your screen is 80\n";
		print "   columns wide and you don't hit RETURN at all (which you ",
				"shouldn't))\n";
		print "Enter ^D (control-D) on a line by itself to finish the ",
				"comments.\n";
		local ($/) = undef;
		$comments = input();
		while ($comments =~ s/^\s+$//) {};	# no completely blank lines
		while ($comments =~ s/^\n//) {};	# no extra newlines in front
		$comments =~ s/\s*\n+\s*$//;		# none at the end either
		print "  {You must have comments}\n\n" and redo COMMENTS
				if not $comments;
		print "  {Comments too long!}\n\n" and redo COMMENTS
				if length($comments) > 255;
	}

	print "working.....\n";

	# show everything and double check:
	writeln(Log, $emp, timerdata::emp_fullname($emp),
			$client, timerdata::client_name($client), $date,
			$proj, timerdata::proj_name($client, $proj),
			$phase, timerdata::phase_name($phase), $hours,
			$cliproj, timerdata::cliproj_name($client, $cliproj));
	writeln(Log_Comments, $comments);

	print "\n\nis everything okay? (y/N)  ";
	print "\n  {Try to log this timer out again later.}\n" and exit
			unless <STDIN> =~ /^y/i;

	my $error = timerdata::insert_log($emp, $client, $proj, $phase, $cliproj,
			$date, $hours, $comments);
	if ($error)
	{
		print "\nthere was some error!\n";
		print "{$error}\n";
		print "please report this to a system administrator for resolution\n";
		exit();
	}
	else
	{
		print "\ntime has been logged to Sybase\n\n";
	}
}

sub input
{
	my ($prompt, $default) = @_;
	
	local ($|) = 1;							# autoflush stdout
	print $prompt;
	print " (", $default, ")" if defined($default);
	print "  " if defined($prompt);

	my $answer = <STDIN>;
	chomp $answer;
	return $answer ? $answer : $default;
}

sub writeln
{
	my ($format, @vars) = @_;
	$format .= "\n";
	$^A = "";
	formline($format, @vars);
	print $^A;
}
