#! /usr/bin/perl -w

use strict;

use Barefoot::debug;

use Barefoot::base;
use Barefoot::date;
use Barefoot::range;
use Barefoot::format;
use Barefoot::DataStore;
use Barefoot::DataStore::DataSet;
use Barefoot::input qw<get_yn input>;


################
#    main()    #
################

my $t3 = DataStore->open(DEBUG ? "t3test" : "T3", $ENV{USER});
# $t3->show_queries();

my $data = $t3->load_table("

        select pa.emp_id, pa.hours, pa.total_pay, pa.pay_date
        from {~reporting}.pay_amount pa

") or die("database error: ", $t3->last_error());

	# get salary data
my $salary_data = $t3->load_table("

        select sa.emp_id, sa.actual_pay
        from {~reporting}.salary_amount sa

") or die("database error: ", $t3->last_error());
	# turn it into a hash
my $salary = {};
$salary->{$_->{emp_id}} = $_->{actual_pay} foreach @$salary_data;

my $expected_tl_rows = @$data;
my $total_hours = 0;
my $total_pay = 0;
my @dates;
foreach my $row (@$data)
{
	$total_hours += $row->{hours};
	$total_pay += $row->{total_pay} unless exists $salary->{$row->{emp_id}};

	push @dates, date::dateTimeSeconds($row->{pay_date});
}
my $min_date = range::min(@dates);
my $max_date = range::max(@dates);
# now add in all saralies
$total_pay += $_ foreach values %$salary;

print "\nPayroll: $expected_tl_rows rows totalling $total_hours hours and "
		. "\$$total_pay total pay\n";
exit 1 unless get_yn("Is this right?");

###########################################################################
### Check Salaries
###########################################################################

$data = $t3->load_table("

		select sa.emp_id, sa.bank_after
		from {~reporting}.salary_amount sa

") or die("database error: ", $t3->last_error());
my $expected_sal_rows = @$data;

{
	no warnings 'numeric';
	print "\n\nPayroll: Here are the new bank balances for "
			. "salaried employees.\n";
	print "Emp  New Balance\n";
	print "---  -----------\n";
	foreach my $row (@$data)
	{
		writeln('@<<  @#######.##', $row->{emp_id}, $row->{bank_after});
	}
	print "\n";
	exit 1 unless get_yn("Is this right?");
}

###########################################################################
### Check Insurance
###########################################################################

$data = $t3->load_table("

		select ia.emp_id, ia.company_contribution
		from {~reporting}.insurance_amount ia
		order by ia.emp_id

") or die("database error: ", $t3->last_error());

print "\n\nPayroll: Please confirm Barefoot insurance contributions:\n";
print "Emp  Contrib\n";
my $expected_ins_rows = 0;
foreach my $row (@$data)
{
	writeln('@<<   @##.##', $row->{emp_id}, $row->{company_contribution});
	++$expected_ins_rows if $row->{company_contribution} > 0;
}
print "\n";
exit 1 unless get_yn("Is this right?");

###########################################################################
### Initial attempt to update
###########################################################################

$min_date = date::mdy($min_date);
$max_date = date::mdy($max_date);

my $from_date = input("\nStart Date:", $min_date);
die("illegal date") unless date::isValid($from_date);
my $to_date = input("End Date:", $max_date);
die("illegal date") unless date::isValid($to_date);
my $check_date = input("Check Date:");
die("illegal date") unless date::isValid($check_date);

my $insert_payroll = <<END;

	insert {~timer}.payroll
		(period_start, period_end, check_date, create_user, create_date)
	values ('$from_date', '$to_date', '$check_date', '$::ENV{USER}', getdate())

END
my $update_time_log = <<END;

	update {~timer}.time_log
	set payroll_id =
		(
			select pay.payroll_id
			from {~timer}.payroll pay
			where pay.check_date = '$check_date'
		),
		chguser = '$::ENV{USER}',
		chgdate = getdate()
	where exists
	(
		select 1
		from {~reporting}.pay_amount pa
		where {~timer}.time_log.log_source = pa.log_source
		and {~timer}.time_log.log_id = pa.log_id
	)

END
my $insert_salary = <<END;

	insert {~timer}.salary_bank
		(emp_id, bank_amount, payroll_id, create_user, create_date)
	select sa.emp_id, bank_after, pay.payroll_id, '$::ENV{USER}', getdate() 
	from {~reporting}.salary_amount sa, {~timer}.payroll pay
	where pay.check_date = '$check_date'

END
my $insert_insurance = <<END;

	insert {~timer}.insurance_contribution
		(emp_id, payroll_id, amount, create_user, create_date)
	select emp_id, pay.payroll_id, ia.company_contribution,
			'$::ENV{USER}', getdate() 
	from {~reporting}.insurance_amount ia, {~timer}.payroll pay
	where ia.company_contribution > 0
	and pay.check_date = '$check_date'

END

# try it once to test the waters
update_it("wrong number of rows");
$t3->rollback();

print "\nInitial attempt successful for payroll $from_date to $to_date,\n";
print "    check date $check_date, affecting $expected_tl_rows log rows,\n";
print "    $expected_sal_rows salary rows, "
		. "and $expected_ins_rows insurance rows\n";
exit 1 unless get_yn("Proceed?");

# now do it for real
update_it("theoretically impossible error occurred");
$t3->commit();

print "\nmark was successful\n";


sub update_it
{
	my ($message) = @_;

	$t3->begin_tran();
	my $res = $t3->do($insert_payroll)
			or die("database error: ", $t3->last_error());
	die($message) unless $res->rows_affected() == 1;
	$res = $t3->do($update_time_log)
			or die("database error: ", $t3->last_error());
	die($message) unless $res->rows_affected() == $expected_tl_rows;
	$res = $t3->do($insert_salary)
			or die("database error: ", $t3->last_error());
	die($message) unless $res->rows_affected() == $expected_sal_rows;
	$res = $t3->do($insert_insurance)
			or die("database error: ", $t3->last_error());
	die($message) unless $res->rows_affected() == $expected_ins_rows;
}
