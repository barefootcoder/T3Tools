#! /usr/bin/perl

use strict;

use Barefoot::date;
use Barefoot::input qw(get_yn input);
use Barefoot::timerdata;


################
#    main()    #
################

my $rows = timerdata::query_results("
        set nocount on

        select 
			log_source,
			log_id,
			emp,
			client,
			proj,
			date,
			hours,
			requires_payment,
			pay_rate,
			pay_rate_type,
			total_pay
        into #pay_amount
        from pay_amount pa
        where not exists ( select 1
                         from salary_amount sa
                         where sa.emp = pa.emp )
        union
        select 
			log_source,
			log_id,
			emp,
			client,
			proj,
			date,
			hours,
			requires_payment,
			pay_rate,
			pay_rate_type,
			0
        from pay_amount pa
        where exists ( select 1
                         from salary_amount sa
                         where sa.emp = pa.emp )

        select hours,
               total_pay,
               convert(char(10), date, 112) 'date',
			   'Hourly' paytype
        from #pay_amount 
        union all
        select  0, 
                sa.actual_pay,
               convert(char(10), sa.start_date, 112),
			   'Salary' paytype
        from salary_amount sa
        set nocount off

	");
die("couldn't access timer database") unless defined($rows);

my $num_rows = @$rows;
my $total_hours = 0;
my $total_pay = 0;
my $min_date = "99999999";
my $max_date = "00000000";
foreach my $row (@$rows)
{
	$total_hours += $row->[0];
	my $pay = $row->[1];
	$pay =~ s/,//g;
	$total_pay += $pay;
	$min_date = $row->[2] if $row->[2] < $min_date;
	$max_date = $row->[2] if $row->[2] > $max_date;
	$num_rows-- if ( $row->[3] eq "Salary" ) ;
}
print "\nPayroll: $num_rows rows totalling $total_hours hours and "
		. "\$$total_pay total pay\n";
exit 1 unless get_yn("Is this right?");

$rows = timerdata::query_results("
		set nocount on

		select 
			emp,
			convert (char(10), start_date,101),
			convert (char(10), end_date,101),
			bank_after
		from salary_amount 
		set nocount off

	");
die("couldn't access timer database") unless defined($rows);

print "\n\nPayroll: Here are the new bank balances for salaried employees.\n";
printf "\n%-5.5s %-15.15s %-15.15s %15.15s\n" , "Emp", "Start Date", "End Date", "New Balance";
foreach my $row (@$rows)
{
	$row->[3] =~ s/,//g;
	printf "%-5.5s %-15.15s %-15.15s %15.2f\n" , $row->[0],$row->[1],$row->[2],$row->[3];
}
print "\n";
exit 1 unless get_yn("Is this right?");

### START INS HERE
$rows = timerdata::query_results("
		set nocount on

		select ia.emp,
			   ia.barefoot_contribution 'Barefoot Contribution',
			   ia.insurance_adjustment 'SAL3 Adjustment'
		from insurance_amount ia
		order by ia.emp

		set nocount off

	");
die("couldn't access timer database") unless defined($rows);

print "\n\nPayroll: Please confirm Barefoot insurance contributions:\n";
printf "\n%-5.5s %10.10s %10.10s\n" , "Emp", "BF Contrib", "SAL3 Adj";
foreach my $row (@$rows)
{
	printf "%-5.5s %10.2f %10.2f\n" , $row->[0],$row->[1],$row->[2];
}
print "\n";
exit 1 unless get_yn("Is this right?");
### END INS HERE

$min_date =~ /(\d\d\d\d)(\d\d)(\d\d)/;
$min_date = "$2/$3/$1";

$max_date =~ /(\d\d\d\d)(\d\d)(\d\d)/;
$max_date = "$2/$3/$1";

my $from_date = input("\nStart Date:", $min_date);
die("illegal date") unless date::isValid($from_date);
my $to_date = input("End Date:", $max_date);
die("illegal date") unless date::isValid($to_date);
my $check_date = input("Check Date:");
die("illegal date") unless date::isValid($check_date);

my $insert_query = "

	set nocount on

	declare \@payroll_id int

	insert payroll
		(period_start, period_end, check_date, create_user, create_date)
	values ('$from_date', '$to_date', '$check_date', '$::ENV{USER}', getdate())
	select \@payroll_id = \@\@identity

	update time_log
	set payroll_id = pay.payroll_id, chguser = '$::ENV{USER}',
			chgdate = getdate()
	from time_log tl, pay_amount pa, payroll pay
	where tl.log_source = pa.log_source
	and tl.log_id = pa.log_id
	and pay.check_date = '$check_date'

	insert salary_bank ( 
	          emp, 
	          bank_amount, 
			  start_date, 
			  end_date, 
			  check_date, 
			  create_user, 
			  create_date )
	select emp, 
			bank_after, 
			start_date, 
			end_date, 
			'$check_date', 
			'$::ENV{USER}', 
			getdate() 
	from salary_amount 

	insert insurance_contribution ( 
	 			emp, 
				payroll_id, 
				amount, 
				create_user, 
				create_date )
	select emp, 
			\@payroll_id, 
			barefoot_contribution,
			'$::ENV{USER}', 
			getdate() 
	from insurance_amount 
	where barefoot_contribution > 0

	delete from pay_amount
	delete from salary_amount
	delete from insurance_amount

	set nocount off
	go
";

timerdata::set_user($::ENV{USER});
my $results = timerdata::run_query("
	begin tran
	go

	$insert_query

	rollback tran
	go
");

die("mark failed <<$results>>") if ( length ( $results ) );

print "\nInitial attempt successful for payroll $from_date to $to_date,\n";
print "    check date $check_date, affecting $num_rows rows & new bank balances\n";
exit 1 unless get_yn("Proceed?");

my $results = timerdata::run_query("
	begin tran
	go

	$insert_query

	commit tran
	go
");
die("theoretically impossible error occurred <<$results>>")  
	if ( length ( $results ) );

print "\nmark was successful\n";
