#! /usr/bin/perl

use strict;

use Barefoot::date;
use Barefoot::input qw(get_yn input);
use Barefoot::timerdata;


################
#    main()    #
################

my $check_date = input("\nPayroll check date:");
die("illegal date") unless date::isValid($check_date);

my $rows = timerdata::query_results("
		select convert(char(10), period_start, 101),
				convert(char(10), period_end, 101),
				payroll_amount, overhead_amount
		from payroll
		where check_date = '$check_date'
	");
die("couldn't access timer database") unless defined($rows);
die("payroll not found") if @$rows == 0;

die("more than once payroll row") if @$rows > 1;
my $row = $rows->[0];

my ($period_start, $period_end, $payroll_amount, $overhead) = @$row;

print "\nPayroll for period from $period_start to $period_end\n";
if ($payroll_amount ne "NULL")
{
	print "This payroll was already marked:\n";
	print "  Payroll amount: $payroll_amount, Overhead amount: $overhead\n";
	exit 2;
}
exit 1 unless get_yn("Is this right?");

$payroll_amount = input("\nTotal payroll amount:");
$overhead = input("\nTotal overhead amount:");

my $update_query = "

	update payroll
	set payroll_amount = $payroll_amount, overhead_amount = $overhead,
			chguser = '$::ENV{USER}', chgdate = getdate()
	where check_date = '$check_date'
	go

";

timerdata::set_user($::ENV{USER});
my $results = timerdata::run_query("
	begin tran
	go

	$update_query

	rollback tran
	go
");
die("mark failed <<$results>>") unless
		$results =~ /^\(1 row affected\)/;

print "\nInitial attempt successful for payroll $check_date,\n";
print "    period from $period_start to $period_end\n";
exit 1 unless get_yn("Proceed?");

my $results = timerdata::run_query("
	begin tran
	go

	$update_query

	commit tran
	go
");
die("theoretically impossible error occurred <<$results>>") unless
		$results =~ /^\(1 row affected\)/;
print "\nmark was successful\n";
