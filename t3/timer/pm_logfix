#! /usr/bin/perl

use strict;

use Barefoot::date;
use Barefoot::input qw(get_yn input);
use Barefoot::timerdata;


################
#    main()    #
################

my $log_id = $ARGV[0];
$log_id = input("Time log ID:") unless defined($log_id);

my $rows = timerdata::query_results("
		select e.fname, c.name, tl.proj, tl.phase, tl.cliproj
		from time_log tl, employee e, client c
		where tl.log_id = $log_id
		and tl.emp = e.emp
		and tl.client = c.client
	");
die("couldn't access timer database") unless defined($rows);
die("bad time log id:".scalar(@$rows)) unless @$rows == 1;

my $employee = $rows->[0]->[0];
my $client = $rows->[0]->[1];
my $proj = $rows->[0]->[2];
my $phase = $rows->[0]->[3];
my $cliproj = $rows->[0]->[4];

print "\nTime log for employee $employee, client $client: "
		. "proj $proj, phase $phase, cliproj $cliproj\n";
exit 1 unless get_yn("Is this right?");

$proj = input("New proj?", $proj);
$phase = input("New phase?", $phase);
$cliproj = input("New cliproj?", $cliproj);

$proj = string::upper($proj);
$phase = string::upper($phase);
$cliproj = string::upper($cliproj);

$cliproj = "'$cliproj'" unless $cliproj eq "NULL";
my $update_query = "
	update time_log
	set proj = '$proj', phase = '$phase', cliproj = $cliproj,
			chguser = '$::ENV{USER}', chgdate = getdate()
	where log_id = $log_id
	go
";

timerdata::set_user($::ENV{USER});
my $results = timerdata::run_query("
	begin tran
	go

	$update_query

	rollback tran
	go
");
die("mark failed <<$results>>") unless
		$results =~ /^\(1 row affected\)\s*$/;

print "\nInitial attempt successful for employee $employee, client $client,\n";
print "    new proj $proj, new phase $phase, new cliproj $cliproj\n";
exit 1 unless get_yn("Proceed?");

my $results = timerdata::run_query("
	begin tran
	go

	$update_query

	commit tran
	go
");
die("theoretically impossible error occurred <<$results>>") unless
		$results =~ /^\(1 row affected\)\s*/;
print "\nmark was successful\n";
