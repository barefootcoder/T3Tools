#! /usr/bin/perl

use strict;

use Barefoot::input qw(input);
use Barefoot::T3;
use Time::localtime;
use CGI;

T3::initialize("/export/usr/$::ENV{USER}");

use constant MAX_MESSAGES => 200;

my $from = input("Show messages from (leave blank for all):");
$from = '.*?' unless $from;
my $to = input("Show messages to (leave blank for all):");
$to = '.*?' unless $to;
my $content = input("Show messages with string (leave blank for all):");
$content = '.*?' unless $content;

$| = 1;
my $history = (T3::config_param('TalkerDir')) . "/history";
open(LOG, $history) or die("can't open server log");

my @messages;
my $num = 0;

{
	local $/ = "\cD";

	while ( <LOG> )
	{
		chomp;

		my @history_line = split("\cC");
		# print "inside\n";
		my $message = {};

		$message->{id} = shift @history_line;
		next unless ($message->{from} = shift @history_line) =~ m/$from/;
		next unless ($message->{to} = shift @history_line) =~ m/$to/;
		$message->{date} = ctime(shift @history_line);
		$message->{content} = shift @history_line;
		$message->{content} = CGI::unescapeHTML($message->{content});
		next unless $message->{content} =~ m/$content/;

		if (++$num > MAX_MESSAGES)
		{
			pop @messages;
		}

		unshift @messages, $message;
	}
	close(LOG);
}

list_messages();

while (1)
{
	my $which = input("\nWhich message to show (l to relist, q to quit)?");
	last if $which eq "q";
	list_messages() and next if $which eq "l";

	my $msg = $messages[$which - 1];
	print message_info($msg), "\n";
	print join("\n", decode_message($msg->{content})), "\n";
}



sub message_info
{
	my ($msg) = @_;
	return "From $msg->{from}, to $msg->{to}, "
			. "received $msg->{date}";
}

sub list_messages
{
	my $count = 0;
	open(LESS, "|less +Gg") or die("can't open pipe");
	foreach my $msg (@messages)
	{
		print LESS ++$count, ": ", message_info($msg), "\n";
		print LESS "Maximum of " . MAX_MESSAGES . " records reached.\n" and last
			if $count >= MAX_MESSAGES;
	}

	close(LESS);
}

sub decode_message
{
	my ($message) = @_;

	# decode CGI encoding
	$message =~ s/%(..)/ chr(hex($1)) /eg;
	# other talker client uses +'s for spaces
	$message =~ s/\+/ /g;
	# split message into distinct lines

	return wantarray ? split(/\r?\n/, $message) : $message;
}
