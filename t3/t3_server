#! /usr/bin/perl

# NOTES:
# Dedicated component that resides in server and processes message requests
# Adapted from Jay's code, which was Copyright 1998-2000 Oaesys Corporation.

# this app expects messages to have "to", "from", and "status" attributes in the
# first 3 attribute positions for one-element messages, and that these attrbs
# have certain predefined values, but makes no other
# assumptions about the xml message format

# ---------------------------------------------------------------------------

use strict;

#use Barefoot::debug;				# comment out for production

use CGI;
use Barefoot::file;
use Barefoot::array;
use Barefoot::T3Timer;
use Barefoot::T3Talker;

# General constants

use constant UPDATE => '0';

use constant TIMER_MODULE => 'TIMER';
use constant TALKER_MODULE => 'TALKER';
use constant TRACKER_MODULE => 'TRACKER';

use constant M_ERROR =>
		'<MESSAGE from="" to="" status="ERROR">ERROR_TEXT</MESSAGE>';

# functions:
sub qualifyString;

# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# main()

my $cgi = new CGI;			#  for CGI operations

my $pquery = $cgi->param('DATA');

if (!$pquery)
{
	# THIS NEXT LINE IS FOR TEST ONLY, TO GET ARG FROM KEYBOARD
	# $pquery = <STDIN>;
	# IN RELEASE VERSION, ONLY THE NEXT LINE SHOULD BE EXPOSED:
	exit;					# nothing to do
}

my $message = qualifyString($pquery);	# Decodes string and pre-tests if valid

my $reply;

if (!UPDATE)
{
	eval
	{
		if ($message->{module} ne TIMER_MODULE)
		{
			# Talker portion of server
			$reply = Barefoot::T3Talker::processMessage($message);
		}
		else
		{
			# Timer portion of server
			$reply = Barefoot::T3Timer::processMessage($message);
		}
	};

	$reply = M_ERROR and chomp($@) and $reply =~ s/ERROR_TEXT/$@/ if $@;
}
else
{
	# Server down for update message
	my $result = Barefoot::T3Timer::ack($message->{command},
		$message->{name},
		"FAIL:Server down for updates, shut down T3 and wait till later.");
}

# now send string to the browser:
print $cgi->header(), $reply;

# <STDIN>;  # Pause Program so we can see output --- TESTING PURPOSES ONLY

# ---------------------------------------------------------------------------

sub qualifyString
{
	my ($xml_string) = @_;

	# also decodes space encoding

	my $attr = getAttrs($xml_string);
	$attr->{time} = time();
	buildMessage($attr);

	# always true -- validation not implemented in this version
	return 1 ? $attr : M_ERROR;
}
# ---------------------------------------------------------------------------

sub getAttrs
{
	my ($element) = @_;

	# Replace %hex values with actual ASCII chars
	# Now automatically handled by CGI library
	#$element =~ s/%(\w\w)/chr(hex($1))/ge;

	my ($open_tag) = $element =~ /<([^\/].*?)>/;

	# read attributes
	my $attr;
	$attr->{$1} = $2 while $open_tag =~ m/(\w+)="(.*?)"/g;

	($attr->{_DATA_}) = $element =~ /<.*?>(.*?)<\/.*>/;
	$attr->{_FULL_} = $element;

	return $attr;
}
# ---------------------------------------------------------------------------

sub buildMessage
{
	my ($attr) = @_;

	# get the data out of the attr so it won't show up in the attlist
	my $data = delete $attr->{_DATA_};
	# also get rid of the former full message, since we will replace it
	delete $attr->{_FULL_};

	my $message = "<MESSAGE";
	foreach my $attname (keys %$attr)
	{
		$message .= " $attname=\"$attr->{$attname}\"";

#		if ($attname eq "status" && $attr->{$attname} eq ST_NO_REPLY)
#		{
#			# store as Normal to fool the client into displaying msg
#			$message .= " status=\"" . ST_MESSAGE . "\"";
#		}
#		else
#		{
#			$message .= " $attname=\"$attr->{$attname}\"";
#		}
	}
	$message .= ">$data</MESSAGE>\r\n";

	$attr->{_DATA_} = $data;
	$attr->{_FULL_} = $message;
}
# ---------------------------------------------------------------------------
