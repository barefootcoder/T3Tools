-- SORT GROUP: Financial Reports
-- TITLE: Payroll Report

print "Period from [start_date] to [end_date]"					?!check_date
print ""														?!check_date
print ""														?!check_date
go																?!check_date

print "Payroll Checks paid on [check_date]"						??check_date
print ""														??check_date
print ""														??check_date
go																??check_date

$(build_pay_amount "
	exists														??check_date
	(															??check_date
		select 1												??check_date
		from payroll pay										??check_date
		where log.payroll_id = pay.payroll_id					??check_date
		and pay.check_date = '[check_date]'						??check_date
	)															??check_date

	log.date <= '[end_date]'									?!check_date
	and log.payroll_id is NULL									?!check_date
	and exists													?!check_date
	(															?!check_date
		select 1												?!check_date
		from pay_rate pr										?!check_date
		where log.emp = pr.emp									?!check_date
		and log.client = isnull(pr.client, log.client)			?!check_date
		and log.proj = isnull(pr.proj, log.proj)				?!check_date
		and log.date between pr.start_date and pr.end_date		?!check_date
		and pr.rate_type != 'S'									?!check_date
	)															?!check_date
")

exec calc_pay_amount
go

delete pay_amount where requires_payment = 0
go

-- for debugging
/*
select emp, client, proj, convert(char(10), date, 101) "date", hours,
	convert(char(6), pay_rate) "payrate", pay_rate_type "PayT",
	convert(char(12), total_pay, 1) "total_pay"
from pay_amount
order by emp, client, proj, date
*/
go

select count(*) "time logs to be updated"
from pay_amount
go

if exists (select 1 from pay_amount where pay_rate_type is NULL)
	or exists (select 1 from pay_amount where total_pay = 0)
begin
	print ""
	print ""
	print "<H1>WARNING!!! The following log entries had errors:</H1>"
	print ""
	select pa.emp "E", e.fname "employee", pa.client "C", c.name "client",
			pa.proj, convert(char(10), pa.date, 101) "date", pa.hours,
			convert(char(6), pa.pay_rate) "payrate", pa.pay_rate_type "PT",
			convert(char(12), pa.total_pay)
	from pay_amount pa, employee e, client c
	where pa.emp = e.emp
	and pa.client = c.client
	and
	(
		pa.pay_rate_type is NULL		-- this should never happen
		or pa.total_pay = 0				-- there better be some pay there
	)
	order by pa.emp, pa.client, pa.proj, pa.date
end
go

if exists														?!check_date
(																?!check_date
	select 1 from pay_amount where date < '[start_date]'		?!check_date
)																?!check_date
begin															?!check_date
	print ""													?!check_date
	print ""													?!check_date
	print "WARNING!  The following log entries are suspicious,"	?!check_date
	print "because they are for hours before the start date of"	?!check_date
	print "the payroll period."									?!check_date
	print ""													?!check_date
	select pa.emp "E", e.fname "employee", pa.client "C",		?!check_date
			c.name "client", pa.proj,							?!check_date
			convert(char(10), pa.date, 101) "date", pa.hours,	?!check_date
			convert(char(6), pa.pay_rate) "payrate",			?!check_date
			pa.pay_rate_type "PT",								?!check_date
			convert(char(12), pa.total_pay) "pay"				?!check_date
	from pay_amount pa, employee e, client c					?!check_date
	where pa.emp = e.emp										?!check_date
	and pa.client = c.client									?!check_date
	and pa.pay_rate_type != 'S'									?!check_date
	and pa.date < '[start_date]'								?!check_date
	order by pa.emp, pa.client, pa.proj, pa.date				?!check_date
end																?!check_date
go																?!check_date

print ""
print ""
print "Employee hours by project"
print ""
go
select pa.emp, $(employee_name e) "employee", c.name "client", p.name "project",
	convert(char(6), pa.pay_rate) "rate",
	convert(numeric(6,2), sum(pa.hours)) "hours",
	convert(char(12), sum(pa.total_pay)) "total pay"
from pay_amount pa, employee e, client c, project p
where pa.emp = e.emp
and pa.client = c.client
and pa.client = p.client
and pa.proj = p.proj
and pa.date between p.start_date and p.end_date
and pa.pay_rate_type != 'S'
group by pa.emp, $(employee_name e), c.name, p.name, pa.pay_rate
go

-- Add calc_salary_pay here
exec calc_salary_pay @start_date = '[start_date]', @end_date = '[end_date]'                  ?!check_date
exec calc_salary_pay @check_date = '[check_date]'                                            ??check_date

print ""
print ""
print "Employee hours by rate"
print ""
go

set nocount on 
select pa.emp, $(employee_name e) "employee",
    convert(char(6), pa.pay_rate) "rate",
    convert(numeric(6,2), sum ( pa.hours )) "hours",
    convert(money, sum ( pa.total_pay) ) "total"
into #payroll_final
from pay_amount pa, employee e
where pa.emp = e.emp
and pa.pay_rate_type != 'S'
and not exists ( select 1
                 from salary_amount sa
                 where sa.emp = pa.emp )
group by pa.emp, $(employee_name e), pa.pay_rate

insert #payroll_final
select pa.emp, $(employee_name e) "employee",
    "Salary",
    convert(numeric(6,2), sum ( pa.hours)) "hours",
    convert(money, sa.actual_pay) "total"
from pay_amount pa, employee e, salary_amount sa
where pa.emp = e.emp
and pa.emp = sa.emp
and pa.pay_rate_type != 'S'
group by pa.emp, $(employee_name e), sa.actual_pay

select *
from #payroll_final
order by emp, rate
compute sum(hours), sum(total) by emp
compute sum(hours), sum(total)
set nocount off 

--------------------------------------------------------------------------------

print ""
print "Summary for Salaried Employees"
print ""

select  sa.emp,
	$(employee_name e) "employee",
convert (numeric(8,2),sa.total_pay ) total_pay,
convert (numeric(8,2),sa.actual_pay ) actual_pay,
convert (numeric(8,2),sa.bank_before ) bank_before,
convert (numeric(8,2),sa.bank_adjust ) bank_adjust,
convert (numeric(8,2),sa.bank_after ) bank_after
from salary_amount sa, employee e
where sa.emp = e.emp 

--------------------------------------------------------------------------------

set nocount on
print ""
print "SAL3 (Insurance Adjustments) for Employees"
print ""
go

calc_insurance_contribution @start_date = '[start_date]'                      ?!check_date
calc_insurance_contribution @check_date = '[check_date]'                      ??check_date

set nocount off

select ia.emp Emp,
       $(employee_name e) 'Employee',
       ia.total_hours 'Total Hours',
       ia.applicable_hours 'Applicable Hrs',
       ia.barefoot_contribution 'Barefoot Contribution',
       ia.insurance_adjustment 'SAL3 Adjustment'
from insurance_amount ia, employee e
where ia.emp = e.emp
order by ia.emp
go
