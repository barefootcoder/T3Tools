# SORT GROUP: Financial Reports
# TITLE: Payroll Report

&print
{if !check_date}
Period from {start_date} to {end_date}
{endif}
{if check_date}
Payroll Checks paid on {check_date}
{endif}


;

&proc build_pay_amount

	{if check_date}
		exists
		(
			select 1
			from {~timer}.payroll pay
			where log.payroll_id = pay.payroll_id
			and pay.check_date = {check_date}
		)
	{endif}

	{if !check_date}
		log.log_date <= {end_date}
		and log.payroll_id is NULL
		and exists
		(
			select 1
			from {~timer}.pay_rate pr
			where log.emp_id = pr.emp_id
			and log.client_id = isnull(pr.client_id, log.client_id)
			and log.proj_id = isnull(pr.proj_id, log.proj_id)
			and log.log_date between pr.start_date and pr.end_date
			and pr.rate_type != 'S'
		)
	{endif}

;

# print "done building"


	delete {~reporting}.pay_amount where requires_payment = 0
->format
;


##################
### ERROR CHECKING
##################


	# for debugging
&ignore
	select emp_id, client_id, proj_id, pay_date, hours,
			pay_rate, pay_rate_type as PayT, total_pay
	from {~reporting}.pay_amount
	order by emp_id, client_id, proj_id, pay_date
;

	select count(*)
	from {~reporting}.pay_amount
->format
	B=>time logs to be updated: %1
;

	select pa.emp_id, pe.first_name, pa.client_id, c.name,
			pa.proj_id, pa.pay_date, pa.hours, pa.pay_rate,
			pa.pay_rate_type, pa.total_pay
	from {~reporting}.pay_amount pa, {~timer}.employee e, {~t3}.person pe,
			{~timer}.client c
	where pa.emp_id = e.emp_id
	and e.person_id = pe.person_id
	and pa.client_id = c.client_id
	and
	(
		pa.pay_rate_type is NULL        -- this should never happen
		or pa.total_pay = 0             -- there better be some pay there
	)
	order by pa.emp_id, pa.client_id, pa.proj_id, pa.pay_date
->suppress_empty
->format
	H->
	H->
	H-><H1>WARNING!!! The following log entries had errors:</H1>
	H->
	H->E   employee             C   client               PRJ date        hours pay $  PT total pay
	H->--- -------------------- --- -------------------- --- ----------- ----- ------ -- -------
	B->@<< @<<<<<<<<<<<<<<<<<<< @<< @<<<<<<<<<<<<<<<<<<< @<< @>>>>>>>>>> @#.## @##.## @< @###.##
;

{if !check_date}
	select pa.emp_id as EMP, pe.first_name as employee,
			pa.client_id as CLI, c.name as client, pa.proj_id as PRJ,
			pa.pay_date, pa.hours, pa.pay_rate as "pay $",
			pa.pay_rate_type as PT, pa.total_pay as ttl_pay
	from {~reporting}.pay_amount pa, {~timer}.employee e, {~t3}.person pe,
			{~timer}.client c
	where pa.emp_id = e.emp_id
	and e.person_id = pe.person_id
	and pa.client_id = c.client_id
	and pa.pay_rate_type != 'S'
	and pa.pay_date < {start_date}
	order by pa.emp_id, pa.client_id, pa.proj_id, pa.pay_date
->suppress_empty
->format
	H=>
	H=>
	H=>WARNING!  The following log entries are suspicious,
	H=>because they are for hours before the start date of
	H=>the payroll period.
	H=>
	H=>%default
	B->@<< @<x20 @<< @<x20 @<< @>x11 @#.## @##.## @< @###.##
	F=>
	F=>
{endif}
;


##################
### MAIN REPORT
##################


# get $(employee_name e) here
	select pa.emp_id as EMP, pe.first_name as employee, c.name as client,
		p.name as project, pa.pay_rate as rate, sum(pa.hours) as hours,
		sum(pa.total_pay) as total_pay
	from {~reporting}.pay_amount pa, {~timer}.employee e,
		{~timer}.client c, {~timer}.project p,
		{~t3}.person pe
	where pa.emp_id = e.emp_id
	and pa.client_id = c.client_id
	and pa.client_id = p.client_id
	and pa.proj_id = p.proj_id
	and pa.pay_date between p.start_date and p.end_date
	and pa.pay_rate_type != 'S'
	and e.person_id = pe.person_id
	group by pa.emp_id, pe.first_name, c.name, p.name, pa.pay_rate
->format
	H=>%default
	B->@<< @<x20 @<x30 @<x30 @##.## @#.## @#####.##
;

#-----------------------------------------------------------------------------
# calculate salary stuff
#-----------------------------------------------------------------------------

&proc calc_salary_bank

	{if !check_date}

		{start_date} between sd.start_date and sd.end_date

	{endif}

	{if check_date}

		exists
		(
			select 1
			from {~timer}.payroll pay
			where pay.check_date = {check_date}
			and pay.period_start between sd.start_date and sd.end_date
		)

	{endif}

;

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------

	#get $(employee_name e) here
	select pa.emp_id as EMP, pe.first_name as employee,
		pa.pay_rate as rate, sum(pa.hours) as hours,
		sum(pa.total_pay) as total
	from {~reporting}.pay_amount pa, {~timer}.employee e, {~t3}.person pe
	where pa.emp_id = e.emp_id
	and pa.pay_rate_type != 'S'
	and e.person_id = pe.person_id
	and not exists
	(
		select 1
		from {~reporting}.salary_amount sa
		where sa.emp_id = pa.emp_id
	)
	group by pa.emp_id, pe.first_name, pa.pay_rate
->format
	H=>
	H=>
	H=>Employee hours by rate
	H=>
	H=>%default
	B->@<< @<x20  @##.##   @##.##   @########.##
;

	#get $(employee_name e) here
	select pa.emp_id, pe.first_name,
		sum(pa.hours), sa.actual_pay "total"
	from {~reporting}.pay_amount pa, {~timer}.employee e,
		{~reporting}.salary_amount sa, {~t3}.person pe
	where pa.emp_id = e.emp_id
	and pa.emp_id = sa.emp_id
	and pa.pay_rate_type != 'S'
	and e.person_id = pe.person_id
	group by pa.emp_id, pe.first_name, sa.actual_pay
->format
	B->@<< @<x20  Salary   @##.##   @########.##
;


#-----------------------------------------------------------------------------
# calculate company contributions to health insurance
#-----------------------------------------------------------------------------

&proc calc_insurance_contribution
;

	# use $(employee_name) here
	select ia.emp_id as EMP, pe.first_name as employee,
		   ia.total_hours as total_hours,
		   ia.applicable_hours as applicable_hrs,
		   ia.company_contribution as contribution
	from {~reporting}.insurance_amount ia, {~timer}.employee e,
		{~t3}.person pe
	where ia.emp_id = e.emp_id
	and e.person_id = pe.person_id
	order by ia.emp_id
->format
	H=>
	H=>Insurance Contributions for Employees
	H=>
	H=>%default
	B->@<< @<x20 @#######.## @##########.## @########.##
;

#-----------------------------------------------------------------------------


	# use $(employee_name) here
	select  sa.emp_id as EMP, pe.first_name as employee,
		sa.total_pay as total, sa.actual_pay as actual,
		sa.bank_before as before, sa.bank_adjustment as adjustmt,
		sa.bank_after as after
	from {~reporting}.salary_amount sa, {~timer}.employee e, {~t3}.person pe
	where sa.emp_id = e.emp_id 
	and e.person_id = pe.person_id
->format
	H=>
	H=>Summary for Salary/Draw Employees
	H=>
	H=>                         <===== PAY =====> <========= BANK =========>
	H=>%default
	B->@<< @<x20 @####.## @####.## @####.## @####.## @####.##
;
